<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SHOYAN BLOG</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://48n.jp/"/>
  <updated>2021-07-08T09:52:20.222Z</updated>
  <id>https://48n.jp/</id>
  
  <author>
    <name>Shohei Yamasaki</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ブログシステムをHexoにしました</title>
    <link href="https://48n.jp/blog/2019/10/31/replace-blog-system/"/>
    <id>https://48n.jp/blog/2019/10/31/replace-blog-system/</id>
    <published>2019-10-31T09:30:30.000Z</published>
    <updated>2021-07-08T09:52:20.222Z</updated>
    
    <content type="html"><![CDATA[<p>ブログシステムを<a href="https://hexo.io/" target="_blank">Hexo<img src="/images/outbound.svg" alt="hexo.io" width="16" height="16"></a>にしました。ブログデザインも新規で作成しました。ブログシステムはそのうちリプレースしたいなと常々思っていたのですが、なかなかこれといったものがなく時間が経ってしまいましたが、ついにリプレースすることができました。</p><h2 id="以前のブログシステム"><a href="#以前のブログシステム" class="headerlink" title="以前のブログシステム"></a>以前のブログシステム</h2><p>以前のブログシステムはOctopressを使っていました。このOctopress、いくつか問題点がありました。</p><h3 id="動作が遅い"><a href="#動作が遅い" class="headerlink" title="動作が遅い"></a>動作が遅い</h3><p>Markdownで書いてそれをhtmlに変換する仕組みなのですが、その速度が遅いです。<br>記事数が少ない場合はそれほど気にならなかったのですが、100記事くらいになってくると明らかに遅くなってきます。<br>現在では、プレビューモードで変換するのに10秒程度かかってしまい、気持ちよく記事が書けない状態でした。</p><h3 id="メンテナンスされていない"><a href="#メンテナンスされていない" class="headerlink" title="メンテナンスされていない"></a>メンテナンスされていない</h3><p>2015年で開発が止まっています。新機能や改善もないですし、機能に問題がある場合も修正がされません。開発が止まっているものは使うべきではありません。今から使うのはやめたほうがいいでしょう。</p><h2 id="なぜHexoにしたのか"><a href="#なぜHexoにしたのか" class="headerlink" title="なぜHexoにしたのか"></a>なぜHexoにしたのか</h2><h3 id="Node-jsで書かれているから"><a href="#Node-jsで書かれているから" class="headerlink" title="Node.jsで書かれているから"></a>Node.jsで書かれているから</h3><p>HexoはNode.jsで書かれています。<br>最近はNode.jsを使うことが多いので、Node.jsで書かれているブログシステムを使いたかったのです。</p><h3 id="静的サイトジェネレーターだから"><a href="#静的サイトジェネレーターだから" class="headerlink" title="静的サイトジェネレーターだから"></a>静的サイトジェネレーターだから</h3><p>ブログシステムには大きく分けて静的サイトジェネレーターとデータベースを使ったブログシステムがあります。Hexoは静的サイトジェネレーターと言われるシステムです。静的サイトジェネレーターはMarkdown等の形式で書かれたファイルをhtmlに変換するソフトウェアです。</p><p>静的サイトジェネレーターのメリットは表示速度が早い、セキュリティリスクがほとんどない、他のシステムに移行しやすいなどのメリットがあります。個人ブログであれば静的サイトジェネレーターがおすすめです。</p><h3 id="人気のあるブログシステムだから"><a href="#人気のあるブログシステムだから" class="headerlink" title="人気のあるブログシステムだから"></a>人気のあるブログシステムだから</h3><p>Node.jsで書かれていて人気のあるブログシステムはHexoとGatsby、あとは最近VuePressも人気が出てきているようです。<br>他にどんなソフトウェアがあるかはこちらで確認することができます。</p><ul><li><a href="https://github.com/topics/static-site-generator" target="_blank">static-site-generator · GitHub Topics<img src="/images/outbound.svg" alt="hexo.io" width="16" height="16"></a></li></ul><p>人気のあるソフトウェアは開発が活発で便利な機能も多く、使いやすいことが多いです。</p><h3 id="現在も開発が行われているから"><a href="#現在も開発が行われているから" class="headerlink" title="現在も開発が行われているから"></a>現在も開発が行われているから</h3><p>Hexoは現在も開発が行われています。2019-10-14にバージョン4.0のリリースが行われました。</p><ul><li><a href="https://hexo.io/news/2019/10/14/hexo-4-released/" target="_blank">Hexo 4.0.0 Released | Hexo<img src="/images/outbound.svg" alt="hexo.io" width="16" height="16"></a></li></ul><h2 id="Hexo-vs-Gatsby-vs-VuePress"><a href="#Hexo-vs-Gatsby-vs-VuePress" class="headerlink" title="Hexo vs Gatsby vs VuePress"></a>Hexo vs Gatsby vs VuePress</h2><p>Node.js環境の静的サイトジェネレーターはHexo、Gatsby、VuePressの3つが人気です。GatsbyとVuePressは次の理由で採用しませんでした。</p><h3 id="Gatsbyを採用しなかった理由"><a href="#Gatsbyを採用しなかった理由" class="headerlink" title="Gatsbyを採用しなかった理由"></a>Gatsbyを採用しなかった理由</h3><p><a href="https://www.gatsbyjs.org/" target="_blank">Gatsby<img src="/images/outbound.svg" alt="hexo.io" width="16" height="16"></a>はReactベースの静的サイトジェネレーターです。Reactに慣れている人であればいいかもしれませんが、私がReactに詳しくないのもあり、Gatsbyは学習コストが高いという印象です。あえてその学習コストを払ってGatsbyを使うメリットが見当たらないので採用を見送りました。</p><h3 id="VuePressを採用しなかった理由"><a href="#VuePressを採用しなかった理由" class="headerlink" title="VuePressを採用しなかった理由"></a>VuePressを採用しなかった理由</h3><p><a href="https://vuepress.vuejs.org/" target="_blank">VuePress<img src="/images/outbound.svg" alt="hexo.io" width="16" height="16"></a>がメジャーバージョンになったということもあり、VuePressも試してみました。情報が少なくまだまだ使いづらいというのが正直なところで、VuePressを使うメリットが見当たりませんでした。<br>ブログではなく、ドキュメントなどのシステムとして使うならありかもしれません。<br>一応、サンプルコードをGitHubにあげているので興味のある方は参考にしてみてください。</p><ul><li><a href="https://github.com/shoyan/vuepress-sample" target="_blank">vuepress-sample<img src="/images/outbound.svg" alt="hexo.io" width="16" height="16"></a></li></ul><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>特にこだわりがなくブログを楽に構築したいということであれば、Hexo一択ではないかと思います。最後にHexoを使うメリットについて説明します。</p><h2 id="Hexoを使うメリット"><a href="#Hexoを使うメリット" class="headerlink" title="Hexoを使うメリット"></a>Hexoを使うメリット</h2><h3 id="ブログの基本機能が簡単に作成できる"><a href="#ブログの基本機能が簡単に作成できる" class="headerlink" title="ブログの基本機能が簡単に作成できる"></a>ブログの基本機能が簡単に作成できる</h3><p>Hexoでのブログ構築は5つのコマンドを実行するだけです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p><code>hexo server</code> を実行後に<code>http://localhost:4000</code> にアクセスするとブログが表示されます。</p><h3 id="テーマの作成がしやすい"><a href="#テーマの作成がしやすい" class="headerlink" title="テーマの作成がしやすい"></a>テーマの作成がしやすい</h3><p>Hexoにはテーマ作成をサポートするツールが用意されています。<br><a href="https://www.npmjs.com/package/generator-hexo-theme" target="_blank">generator-hexo-theme<img src="/images/outbound.svg" alt="hexo.io" width="16" height="16"></a>を使えば簡単にブログテーマの雛形を用意することができます。<br>ブログテーマは自作したのですが、その雛形はgenerator-hexo-themeで作成しました。</p><h3 id="CI-CDも簡単"><a href="#CI-CDも簡単" class="headerlink" title="CI/CDも簡単"></a>CI/CDも簡単</h3><p>masterにマージしたら自動的にデプロイする設定を入れています。そのあたりも公式のマニュアルが用意してあり、手順にそって設定していくだけでCI/CD環境を作ることができます。私はGitHub Pagesを使っており、サーバー費用0円でブログを運営しています。コストパフォーマンスは最高ですね。</p><ul><li><a href="https://hexo.io/docs/github-pages.html" target="_blank">GitHub Pages | Hexo<img src="/images/outbound.svg" alt="hexo.io" width="16" height="16"></a></li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>Hexoは学習コストが低く、テーマ作成もわりと簡単にできるので楽にブログを作りたい人におすすめです。Node.js環境でブログを作りたいときは検討してみてはいかがでしょうか。</p>]]></content>
    
    <summary type="html">
    
      ブログシステムをHexoにしました。Hexoのメリットや他のフレームワークであるGatsubyやVuePressと比較した結果などをまとめました。
    
    </summary>
    
    
    
      <category term="ブログ" scheme="https://48n.jp/tags/%E3%83%96%E3%83%AD%E3%82%B0/"/>
    
      <category term="Hexo" scheme="https://48n.jp/tags/Hexo/"/>
    
      <category term="静的サイトジェネレーター" scheme="https://48n.jp/tags/%E9%9D%99%E7%9A%84%E3%82%B5%E3%82%A4%E3%83%88%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AC%E3%83%BC%E3%82%BF%E3%83%BC/"/>
    
  </entry>
  
  <entry>
    <title>スピードの価値</title>
    <link href="https://48n.jp/blog/2019/09/20/the-value-of-speed/"/>
    <id>https://48n.jp/blog/2019/09/20/the-value-of-speed/</id>
    <published>2019-09-20T04:43:04.000Z</published>
    <updated>2021-07-08T09:52:20.222Z</updated>
    
    <content type="html"><![CDATA[<p>開発をする上で最も大切にしなければいけないものはなんでしょうか。私はスピードだと思います。</p><p>開発はコストです。早く終わるということは、その分コストを削れます。コストを削ることができればその分が利益になります。ビジネスの目的である利益に貢献しているので、これはとても価値のあることです。</p><p>バスより飛行機が高いのも早く目的地に着くからですね。食洗機や洗濯機をお金を出して買うのも、家事の時間が短縮されるからです。<br>ブラウザは何を使っていますか？世界のブラウザのシェアNo1はGoogle Chromeです。Chromeが1番速いからみんな使っているのです。</p><p>速いということはそれだけで価値があるのです。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;開発をする上で最も大切にしなければいけないものはなんでしょうか。私はスピードだと思います。&lt;/p&gt;
&lt;p&gt;開発はコストです。早く終わるということは、その分コストを削れます。コストを削ることができればその分が利益になります。ビジネスの目的である利益に貢献しているので、これはと
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>シンプルに実装する大切さ</title>
    <link href="https://48n.jp/blog/2019/08/19/simple-implementation/"/>
    <id>https://48n.jp/blog/2019/08/19/simple-implementation/</id>
    <published>2019-08-19T03:48:14.000Z</published>
    <updated>2021-07-08T09:52:20.222Z</updated>
    
    <content type="html"><![CDATA[<p>私はシンプルに実装することをとても大切にしています。最も大切にしていると言っても過言ではありません。</p><p>プログラミングの経験が浅い人は、難解なコードを書いたり、短い行数でコードを書けることがかっこいいと考えているかもしれませんが、完全に間違っています。シンプルに実装することは実は難しいのです。プログラムというものは、すぐに複雑になってしまうからです。複雑でかっこいいコードを書こうという考えがそもそもの間違いです。</p><p>この記事を読んでいるみなさんは、今後は簡単でシンプルな必要最小限のコードを書くという意識でコードを書いてください。</p><p>私はNode.jsのコミッターがトラディショナルなfor文を使ったコードを書いていることを見たことがあります。そのコードは、これ以上ないくらいシンプルなコードでした。</p><p>現在のプログラムの多くは、今後も多くの変更が入ります。そうであれば、完璧に動くことよりもメンテナンスがしやすいことが大切です。後々、悪い影響を及ぼすコードは複雑で難解なコードです。シンプルで意図が明快なコードが問題を起こすことはありません。</p><p>一般的な技術を有したエンジニアであれば誰でも理解できるコードを書いてください。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;私はシンプルに実装することをとても大切にしています。最も大切にしていると言っても過言ではありません。&lt;/p&gt;
&lt;p&gt;プログラミングの経験が浅い人は、難解なコードを書いたり、短い行数でコードを書けることがかっこいいと考えているかもしれませんが、完全に間違っています。シンプルに
      
    
    </summary>
    
    
    
      <category term="コラム" scheme="https://48n.jp/tags/%E3%82%B3%E3%83%A9%E3%83%A0/"/>
    
  </entry>
  
  <entry>
    <title>テストカバレッジ100%を目指さない理由</title>
    <link href="https://48n.jp/blog/2019/08/02/why-do-not-i-aim-for-100-test-coverage/"/>
    <id>https://48n.jp/blog/2019/08/02/why-do-not-i-aim-for-100-test-coverage/</id>
    <published>2019-08-02T08:47:20.000Z</published>
    <updated>2021-07-08T09:52:20.222Z</updated>
    
    <content type="html"><![CDATA[<h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>テストカバレッジ100%は目指さない</p><h2 id="理由"><a href="#理由" class="headerlink" title="理由"></a>理由</h2><p>以前、このようなツイートをしました。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">マージ条件に作成したコードのテストカバレッジが100%であることというプロジェクトを見たことがあります</p>&mdash; しょーやん (@sinn_shoyan) <a href="https://twitter.com/sinn_shoyan/status/1155279098102472705?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">July 28, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>テストカバレッジ100%に違和感を感じない人はもう少し勉強した方がいいですね。</p><p>テストカバレッジ100%を目指すとこのようになってしまいます。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">テストカバレッジ100%を目指すとどうなるかを説明しましょう。テストの目的がカバレッジを通すことになってしまい、意味のないテストが乱立します</p>&mdash; しょーやん (@sinn_shoyan) <a href="https://twitter.com/sinn_shoyan/status/1155279684218675201?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">July 28, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>さらにテストの問題も発生します。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">さらに、コードとテストコードが密結合になり、コードを少し変えるとテストが落ちるという状態になります。リファクタリングする場合、テストコードも書き直しになります</p>&mdash; しょーやん (@sinn_shoyan) <a href="https://twitter.com/sinn_shoyan/status/1155280247924768772?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">July 28, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>テストカバレッジの問題については次の記事に詳しく書いてあります。</p><ul><li><a herf="https://qiita.com/bremen/items/d02eb38e790b93f44728" target="_blank">テストカバレッジ100%を追求しても品質は高くならない理由と推奨されるカバレッジの目標値について</a></li></ul><p>全てのコードにコメントを書くのは馬鹿げていると感じる人は多いでしょう。全てのコードにテストを書くということも同じように考えるとどうでしょう。何事も過ぎたるは及ばざるが如しです。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;結論&quot;&gt;&lt;a href=&quot;#結論&quot; class=&quot;headerlink&quot; title=&quot;結論&quot;&gt;&lt;/a&gt;結論&lt;/h2&gt;&lt;p&gt;テストカバレッジ100%は目指さない&lt;/p&gt;
&lt;h2 id=&quot;理由&quot;&gt;&lt;a href=&quot;#理由&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
    
      <category term="ソフトウェア開発" scheme="https://48n.jp/tags/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA/"/>
    
  </entry>
  
  <entry>
    <title>データベース固有の関数の使用を避けるべき理由</title>
    <link href="https://48n.jp/blog/2019/04/25/avoid-using-database-specific-functions/"/>
    <id>https://48n.jp/blog/2019/04/25/avoid-using-database-specific-functions/</id>
    <published>2019-04-25T07:21:18.000Z</published>
    <updated>2021-07-08T09:52:20.218Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは、しょーやんです。</p><p>私はエンジニアとして12年目で、現在はエンジニアチームのリーダーとしてWebアプリケーションのシステムを開発しています。キャリアとしては、SIerで1年、ベンチャー企業で3年、300人程度の企業で5年、現在は6000人規模の会社でエンジニアとして働いています。</p><p>前提として、ここで話すことはアプリケーション設計に関する話しです。データベースの関数自体の使用を否定しているわけではありません。データベース固有の関数を使う前に少し考えてみましょうという話しです。まずは、データベース固有の関数を使うリスクについて説明します。</p><h2 id="データベース固有の関数を使うリスク"><a href="#データベース固有の関数を使うリスク" class="headerlink" title="データベース固有の関数を使うリスク"></a>データベース固有の関数を使うリスク</h2><p>データベースには固有の関数が用意されています。MySQLだとDATE_FORMATやNOW、SUMといったような関数です。これらを利用するのは便利ですが、安易な利用はおすすめしません。相応の理由がない限りは避けるべきです。理由は、データベース固有の関数を利用すると移植性が失われてしまうからです。</p><p>多くの人はデータベースを変更することはほとんどないだろうと考えます。本当にそうでしょうか。</p><p>例えば、開発環境ではSQLite、プロダクション環境ではMySQLを使うということは特段珍しいことではありません。<br>トランザクション境界を分離できないようなインテグレーションテストを実行するときはどうでしょうか。</p><p>ユーザーの情報を取得するAPIのインテグレーションテストがあるとします。このテストをクリアするためには、事前にユーザーのデータをデータベースに登録しておくことが必要です。そうでなければユーザーのデータを検証することができません。<br>テスト用のデータベースを共有で利用していた場合、一時的に作成されたテストデータが他のテストに影響するようになるでしょう。この問題は複数のテストが同時に実行されるようなCI環境になると顕著に現れます。解決策の1つとしてプロダクション環境と同じデータベースが含まれたイメージを作成するという手がありますが、複雑なイメージファイルを作成することは、なるべくなら避けたいところです。</p><h2 id="データベースはドアノブである"><a href="#データベースはドアノブである" class="headerlink" title="データベースはドアノブである"></a>データベースはドアノブである</h2><p>ロバート・C・マーティンは著書「Clean Architecture」で、データベースはあくまで道具の1つであり、アーキテクチャの中心になるものではないと言っています。データベースは家のドアノブのようなものであり、アーキテクチャ的にはどうでもよいのです。ドアノブに家の設計を合わせることはしないでしょう。データベースがドアノブのようなものであれば、データベースに依存しないようにアプリケーションを実装するのは当然のことのように思えます。</p><p>RailsやSpringのような現在のフレームワークは、データベースを抽象化して扱えるような仕組みを提供しています。多くの場合、それはORMとして提供されており、利用するドライバーの設定を変更するだけでデータベースを変更することが可能です。</p><p>アプリケーション設計の側面から考えると、データベース固有の関数は避けるべきです。データベース固有の関数を利用する必要が場合は、基本的なCRUDで同じことができないかを検討しましょう。さもなければ、たった1つのデータベース固有の関数のせいでアプリケーションの移植性は失われてしまいます。</p><h2 id="原則としてアプリケーション側で対応する"><a href="#原則としてアプリケーション側で対応する" class="headerlink" title="原則としてアプリケーション側で対応する"></a>原則としてアプリケーション側で対応する</h2><p>多くのアプリケーションは基本的なCRUDで構築することが可能です。少しの手間を省くためにデータベース固有の関数（例えばMySQLのREPLACE）を利用することはデメリットの方が大きくなる可能性があります。よく見られるアンチパターンはNOWの多様です。時刻はアプリケーション側で取得できます。アプリケーション側で対応できるものはアプリケーションの機能で対応しましょう。</p><h2 id="データベース固有の機能に頼った方がいい場合"><a href="#データベース固有の機能に頼った方がいい場合" class="headerlink" title="データベース固有の機能に頼った方がいい場合"></a>データベース固有の機能に頼った方がいい場合</h2><p>データベース固有の機能に頼った方がいい場合も存在します。例えば、位置情報を扱うような場合です。位置情報を扱う場合、PostgreSQLの拡張であるPostGISを利用した方が少ない労力で実装することができるでしょう。このように明確なアドバンテージがある場合はデータベース固有の機能を利用しない理由はありません。</p><iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=syoyama-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=4048930656&linkId=bd16a1851920993a41c2031b32cd6769"></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは、しょーやんです。&lt;/p&gt;
&lt;p&gt;私はエンジニアとして12年目で、現在はエンジニアチームのリーダーとしてWebアプリケーションのシステムを開発しています。キャリアとしては、SIerで1年、ベンチャー企業で3年、300人程度の企業で5年、現在は6000人規模の会社で
      
    
    </summary>
    
    
    
      <category term="ソフトウェアアーキテクチャ" scheme="https://48n.jp/tags/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3/"/>
    
  </entry>
  
  <entry>
    <title>相談ではなく明確な基準を決めよう</title>
    <link href="https://48n.jp/blog/2018/12/17/decide-criteria-instead-of-consultation/"/>
    <id>https://48n.jp/blog/2018/12/17/decide-criteria-instead-of-consultation/</id>
    <published>2018-12-17T03:56:02.000Z</published>
    <updated>2021-07-08T09:52:20.218Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは、しょーやんです。</p><p>私はエンジニアとして12年目で、現在はエンジニアチームのリーダーとしてWebアプリケーションのシステムを開発しています。キャリアとしては、SIerで1年、ベンチャー企業で3年、300人程度の企業で5年、現在は6000人規模の会社でエンジニアとして働いています。</p><p>度々「相談」という言葉が耳に入ってきます。この「相談」という言葉について耳にするたびに「基準を作ればいいのに」と思います。今回は「相談」と「基準」について考えていきたいと思います。</p><p>はじめに私の周りで使われている「相談」について説明します。「相談」とは次のような意味で使われています。</p><p>なんらかの判断を行わないといけないとき、その判断の観点を他者に伺う、もしくはその判断が正しいのどうかを他者に伺う行為。</p><h2 id="相談の問題点"><a href="#相談の問題点" class="headerlink" title="相談の問題点"></a>相談の問題点</h2><p>私は「相談」という言葉があまり好きではありません。それは、相談が引き起こすふるまいには次の問題点があるからです。</p><ul><li>スピードが遅い</li><li>権力者の考えによって判断が異なる</li><li>自身で意思決定ができない</li></ul><h3 id="スピードが遅い"><a href="#スピードが遅い" class="headerlink" title="スピードが遅い"></a>スピードが遅い</h3><p>自分以外の誰かに相談するということは、次のようなタスクが必要になってきます。</p><ul><li>忙しい上司を捕まえる</li><li>関係者とMTGの時間を設定する</li><li>説明する資料を用意する</li></ul><p>これらは本質的な仕事ではなく、仕事のスピードを遅くするだけのタスクにすぎません。</p><h3 id="権力者の考えによって判断が異なる"><a href="#権力者の考えによって判断が異なる" class="headerlink" title="権力者の考えによって判断が異なる"></a>権力者の考えによって判断が異なる</h3><p>多くの場合、なんらかの権利・権力を持っている他者に対して相談を行うことになると思います（なんらかの権利・権力を持っているので権力者と呼ぶことにします）。例えば、ある権力者はAと言いますが、他の権力者に聞いてみるとBと言います。このように権力者によって回答が異なる場合、現場は混乱します。</p><h3 id="自身で意思決定ができない"><a href="#自身で意思決定ができない" class="headerlink" title="自身で意思決定ができない"></a>自身で意思決定ができない</h3><p>自身で意思決定ができない環境でプロフェッショナルとして仕事を行うことは困難です。</p><h2 id="相談ではなく明確な基準を決める"><a href="#相談ではなく明確な基準を決める" class="headerlink" title="相談ではなく明確な基準を決める"></a>相談ではなく明確な基準を決める</h2><p>このように相談にはいくつかの問題があります。相談の問題が見えてきたところで、「基準」について説明します。</p><p>「基準」とは何かの判断を行うときの指標となるものです。例えば、火事が起こったら119番に電話しますし、泥棒に入られた時は110番に電話しますよね。誰も迷うことはないと思います。これは、明確な基準が定められているからですね。</p><p>私は相談ではなく明確な基準を決めるのがよいと考えています。それは、次のようなメリットがあるからです。</p><h2 id="明確な基準を決めるメリット"><a href="#明確な基準を決めるメリット" class="headerlink" title="明確な基準を決めるメリット"></a>明確な基準を決めるメリット</h2><h3 id="誰が判断しても同じ"><a href="#誰が判断しても同じ" class="headerlink" title="誰が判断しても同じ"></a>誰が判断しても同じ</h3><p>明確な基準があれば上長であろうが、あなたであろうが、誰が判断しても同じです。基準の前で立場は関係ありません。</p><h3 id="その場で当事者が判断することができる"><a href="#その場で当事者が判断することができる" class="headerlink" title="その場で当事者が判断することができる"></a>その場で当事者が判断することができる</h3><p>誰が判断しても同じ結果になるわけですから、いちいち誰かに相談する必要はありません。忙しい上司を捕まえたり、関係者とMTGの時間を設定したり、説明する資料を作成する必要もありません。今、この場であなたが決めればいいのです。</p><h2 id="相談と明確な基準の比較"><a href="#相談と明確な基準の比較" class="headerlink" title="相談と明確な基準の比較"></a>相談と明確な基準の比較</h2><p>相談と明確な基準の比較をするために、2つの組織を例として考えてみます。</p><p>1つ目の組織では最終的な判断は上長に相談する必要があります。意思決定をするのに上長とのアポイントメントや説明資料が必要です。意思決定を行うためには1日程度かかるかもしれません。</p><p>2つ目の組織は明確な基準があり、その基準をもとに問題に直面している当人が判断を行います。明確な基準があるので、その問題に直面している人がその場で決めることができます。</p><p>この2つの組織を比較した場合、生産性が高いのは明らかに基準が明確な組織です。このように相談と基準のどちらの戦略をとるかで、生産的な面においての差がみてとれます。</p><h2 id="考えてみよう"><a href="#考えてみよう" class="headerlink" title="考えてみよう"></a>考えてみよう</h2><ul><li>あなたの周りではどのような時に相談が必要でしょうか？</li><li>相談が必要なことを明確な基準に変えることはできないでしょうか？</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは、しょーやんです。&lt;/p&gt;
&lt;p&gt;私はエンジニアとして12年目で、現在はエンジニアチームのリーダーとしてWebアプリケーションのシステムを開発しています。キャリアとしては、SIerで1年、ベンチャー企業で3年、300人程度の企業で5年、現在は6000人規模の会社で
      
    
    </summary>
    
    
    
      <category term="コラム" scheme="https://48n.jp/tags/%E3%82%B3%E3%83%A9%E3%83%A0/"/>
    
  </entry>
  
  <entry>
    <title>手軽にスプラトゥーンをYouTubeで配信する</title>
    <link href="https://48n.jp/blog/2018/12/07/upload-youtube/"/>
    <id>https://48n.jp/blog/2018/12/07/upload-youtube/</id>
    <published>2018-12-07T07:47:03.000Z</published>
    <updated>2021-07-08T09:52:20.222Z</updated>
    
    <content type="html"><![CDATA[<p>私はYouTubeやOPENREC.tvでよくスプラトゥーンの配信を視聴しているのですが、みているだけでなく自分もやってみたいと思ったのでYouTubeで配信をはじめてみました。この記事では、YouTubeでゲーム動画を配信する方法を紹介します。</p><h2 id="配信の手順"><a href="#配信の手順" class="headerlink" title="配信の手順"></a>配信の手順</h2><p>配信の手順としては次の通りです。</p><ol><li>キャプチャボードを使ってゲームの動画と音声を外付けの記録媒体に保存</li><li>記録媒体に保存した動画をPCの編集ソフトを使って編集する（アフレコをしたり、不要な部分をカットしたり、音量の調整をする）</li><li>編集した動画をYouTubeにアップロードする</li></ol><h2 id="配信に必要な機材"><a href="#配信に必要な機材" class="headerlink" title="配信に必要な機材"></a>配信に必要な機材</h2><ul><li>キャプチャボード<ul><li>ゲームの動画と音声をキャプチャするのに必要です</li></ul></li><li>記録媒体<ul><li>USBメモリや外付けHDDなど。PCに保存する場合は不要です</li></ul></li><li>PC<ul><li>動画の編集に必要です。私はMacBook Air(メモリは4GB)を使っています</li></ul></li><li>マイク<ul><li>実況を録音するためのマイクです</li></ul></li></ul><h2 id="キャプチャボードを用意する"><a href="#キャプチャボードを用意する" class="headerlink" title="キャプチャボードを用意する"></a>キャプチャボードを用意する</h2><p>ゲームの動画と音声を録画するにはキャプチャボードが必要です。キャプチャボードには様々な種類があり、どれを使ったらいいのかよくわからなくなると思います（私がそうでした）。私のおすすめのキャプチャボードは<a href="https://amzn.to/2rnVxeD" target="_blank">I-O DATA HDMI キャプチャーボード GV-HDREC</a>です。</p><iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=syoyama-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=B01NBKP6GC&linkId=01b8e2236f4d964da8d3765408052cde"></iframe><p>このキャプチャボードは1万円程度と手頃な値段で操作方法も簡単です。最初の1台としておすすめできます。ただし、PCとの接続はできないので、リアルタイム配信には使えません。</p><h2 id="記録媒体を用意する"><a href="#記録媒体を用意する" class="headerlink" title="記録媒体を用意する"></a>記録媒体を用意する</h2><p>私は32GBのUSBメモリを使っています。スマートフォンに接続できるタイプがおすすめです。録画した動画をスマートフォンで観たり、不要な動画を削除したりできます。</p><iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=syoyama-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=B07GNZ2RYG&linkId=23d57073d72c0301fc32418069273158"></iframe><p>32GBで2時間程度の録画ができます（記録形式によって時間は変わります）。32GBだとこまめにデータを消す必要があるので、もう少し大きな容量がよいかもしれません。</p><h2 id="動画の編集"><a href="#動画の編集" class="headerlink" title="動画の編集"></a>動画の編集</h2><p>画像の編集はiMovieを使っています。簡単な編集であればiMovieで十分です。YouTubeへのアップロード機能もついており、この機能を使ってYouTubeにアップロードしています。iMovieの操作方法についてはドキュメントをご覧ください。</p><ul><li><a href="https://help.apple.com/imovie/mac/10.1/?lang=ja" target="_blank" rel="noopener">iMovieヘルプ</a></li></ul><p>アフレコに使うマイクはアップルの純正イヤホンのマイクを使ってます。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>このような感じで、特に難しいことをせずに動画配信ができてしまいます。今後もスプラトゥーンの動画を配信していくので、ぜひチャンネル登録お願いします！</p><iframe width="560" height="315" src="https://www.youtube.com/embed/MefVKKI8l-4" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;私はYouTubeやOPENREC.tvでよくスプラトゥーンの配信を視聴しているのですが、みているだけでなく自分もやってみたいと思ったのでYouTubeで配信をはじめてみました。この記事では、YouTubeでゲーム動画を配信する方法を紹介します。&lt;/p&gt;
&lt;h2 id=&quot;配
      
    
    </summary>
    
    
    
      <category term="スプラトゥーン2" scheme="https://48n.jp/tags/%E3%82%B9%E3%83%97%E3%83%A9%E3%83%88%E3%82%A5%E3%83%BC%E3%83%B32/"/>
    
  </entry>
  
  <entry>
    <title>シェルスクリプトで別プロセスの終了ステータスを取得する</title>
    <link href="https://48n.jp/blog/2018/11/29/check-other-process/"/>
    <id>https://48n.jp/blog/2018/11/29/check-other-process/</id>
    <published>2018-11-29T05:55:51.000Z</published>
    <updated>2021-07-08T09:52:20.218Z</updated>
    
    <content type="html"><![CDATA[<p>シェルスクリプトで別プロセスの終了ステータスを取得するTipを紹介します。</p><h3 id="ユースケース"><a href="#ユースケース" class="headerlink" title="ユースケース"></a>ユースケース</h3><p>時間のかかる処理などを並列で行い、その実行結果(終了ステータス)を取得したい。</p><h3 id="サンプルコード"><a href="#サンプルコード" class="headerlink" title="サンプルコード"></a>サンプルコード</h3><p>Bashのサンプルコードです。スクリプトに解説を記入しています。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">command1</span></span>() &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"executing commnad1"</span></span><br><span class="line">  sleep 3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">command2</span></span>() &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"executing commnad2"</span></span><br><span class="line">  sleep 3</span><br><span class="line">  <span class="comment"># エラーとして終了させる</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"start"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># バックグラウンドで実行</span></span><br><span class="line">command1 &amp;</span><br><span class="line"><span class="comment"># $!で直前に実行されたコマンドのプロセスIDを取得し、変数に保存している</span></span><br><span class="line">pid1=$!</span><br><span class="line"></span><br><span class="line">command2 &amp;</span><br><span class="line">pid2=$!</span><br><span class="line"></span><br><span class="line"><span class="comment"># waitは指定されたプロセスIDの処理が終わるまで待つ</span></span><br><span class="line"><span class="built_in">wait</span> <span class="variable">$pid1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># $?でwaitで指定しているプロセスの終了ステータスを取得することができる</span></span><br><span class="line"><span class="keyword">if</span> [ $? != 0 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"command1 error"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"commnad1 success"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">wait</span> <span class="variable">$pid2</span></span><br><span class="line"><span class="keyword">if</span> [ $? != 0 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"command2 error"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"command2 success"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"end"</span></span><br></pre></td></tr></table></figure><p>gistにもコードをアップしています。</p><ul><li><a href="https://gist.github.com/shoyan/6f45b6a005fd34a44264fa1dcb4d56e6" target="_blank">wait_process.sh</a></li></ul><p>shellの学習は次の書籍を1冊やっておけば大丈夫です。</p><iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=syoyama-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=4797321946&linkId=98e93361f2c0071d8749d5526b9a8b64"></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;シェルスクリプトで別プロセスの終了ステータスを取得するTipを紹介します。&lt;/p&gt;
&lt;h3 id=&quot;ユースケース&quot;&gt;&lt;a href=&quot;#ユースケース&quot; class=&quot;headerlink&quot; title=&quot;ユースケース&quot;&gt;&lt;/a&gt;ユースケース&lt;/h3&gt;&lt;p&gt;時間のかかる処理な
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://48n.jp/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>RubyでのWebアプリケーション開発はSinatraから入りRailsに行く</title>
    <link href="https://48n.jp/blog/2018/11/20/sinatra-way/"/>
    <id>https://48n.jp/blog/2018/11/20/sinatra-way/</id>
    <published>2018-11-20T07:04:35.000Z</published>
    <updated>2021-07-08T09:52:20.222Z</updated>
    
    <content type="html"><![CDATA[<p>私はソフトウェアエンジニアなのですが、プログラミング講師としても生徒さんにRubyを教えています。RubyでWebアプリケーションを作る場合、まず候補になるフレームワークはRuby on Railsですが、Railsは初学者には難しいと思います。プログラミング初学者にRailsを教えるということは、車の教習所でいきなりスポーツカーを運転させるようなものです。入門者には入門者に適した車があるのと同様にプログラミングにもそのようなものがあります。</p><p>では、最初は何がいいかというと、Sinatraがよいと思います。そういうわけで、Sinatraを使ったWebアプリケーションのサンプルを探してみたのですが、よいものが見つかりませんでした。ないなら作ってしまえというわけで作りました。</p><ul><li><a href="https://github.com/shoyan/sinatra-app" target="_blank">https://github.com/shoyan/sinatra-app</a></li></ul><p>今回作成したのはシンプルなメモアプリケーションでフォームに入力した値をメモとして保存することができます。作成したメモの一覧表示、詳細表示、編集機能、削除機能を実装しています。基本的なCRUD操作を備えており、RESTについても学ぶことができるようになっています。</p><p>わかりやすいようにディレクトリをわけています。initialディレクトリは最初からフルスクラッチで作る場合のディレクトリです。step1はメモの作成とメモの表示機能を実装しています。step2はstep1の機能にメモの削除とメモの編集機能を追加しています。</p><p>実装にあたっては、できるだけRubyの標準ライブラリを使うようにしました。理由は長い年月において最も安定的に使えるのはRubyの標準ライブラリであることからです。サードパーティのライブラリは便利ですが、Rubyのバージョンアップによる互換性の問題などを含んでいます。将来的にも安定して動作させることを考慮すると標準ライブラリで実現できる機能であれば標準ライブラリを選択するのは良い選択肢だと思います。</p><p>また、データベース（正確にはRDBMS）はややこしいので使っていません。もう少し丁寧に説明すると、今回のアプリケーションはプログラミング初学者の学習に適しているアプリケーションをシンプルな実装（環境も含めて）で作るということを目的として作ったので、その点でRDBMSは適していません。では、どうやってメモを永続的に保持するのかというと、ファイルとして保持しています。この機能の実装には、Rubyの標準ライブラリであるpstoreを利用しました。pstoreとはオブジェクトをそのままファイルとして保存するライブラリです。メモアプリケーションの機能を実現するなら、これで十分なわけです。</p><ul><li><a href="https://docs.ruby-lang.org/ja/latest/library/pstore.html" target="_blank">https://docs.ruby-lang.org/ja/latest/library/pstore.html</a></li></ul><p>Webアプリケーションはリクエストとパラメーター（必要であれば）をアプリケーションサーバーに送信し、ルーティング設定に従ってそのリクエストを処理します。そして、レスポンスを返します。この流れを理解することがはじめの1歩です。この流れが理解できていない状態でRailsを使うのは早すぎるように思いますし、データベースの用意やらマイグレーションやらは確実に最初の壁となってプログラミング初学者に立ちはだかるでしょう。</p><p>そのようなややこしいことは置いておいて、まずは小さな動くアプリケーションを作りましょう。Sinatraであればターミナルに数コマンドを打つだけでアプリケーションを起動できます。自分で全てのコードを書いても数時間程度で書くことができます。コードのほとんどは標準のRubyのライブラリを使用しているため、とてもシンプルです。</p><p>ここまではRailsについて散々けなしていますが、誤解のないように断っておくと、本格的なWebアプリケーションを作るのであればRailsがいいです。習得に数ヶ月はかかるでしょうが、多くの機能を少ないコードで実装できてしまうRailsの生産性の高さは、それだけの時間をかける価値があります。しかし、プログラミング初学者がいきなりRailsから入るのは難しいのではと思います。RubyでのWebアプリケーション開発は、まずはSinatraから入りそこからRailsに行くのがよいというのが私の考えです。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;私はソフトウェアエンジニアなのですが、プログラミング講師としても生徒さんにRubyを教えています。RubyでWebアプリケーションを作る場合、まず候補になるフレームワークはRuby on Railsですが、Railsは初学者には難しいと思います。プログラミング初学者にRai
      
    
    </summary>
    
    
    
      <category term="Ruby" scheme="https://48n.jp/tags/Ruby/"/>
    
      <category term="Sinatra" scheme="https://48n.jp/tags/Sinatra/"/>
    
  </entry>
  
  <entry>
    <title>好きなことをひたすら追いかければよい</title>
    <link href="https://48n.jp/blog/2018/10/15/not-goal-2/"/>
    <id>https://48n.jp/blog/2018/10/15/not-goal-2/</id>
    <published>2018-10-15T07:39:50.000Z</published>
    <updated>2021-07-08T09:52:20.222Z</updated>
    
    <content type="html"><![CDATA[<p>この記事は前回の続きです。前回の記事は「<a href="/blog/2018/10/12/not-goal/">計画はいらない</a>」です。</p><p>「好きなことをひたすら追いかければよい」理由は、そのほうがうまくいく可能性が高いからです。</p><p>世の中には好きなことを極めることで、それが結果的に仕事になっている人がいます。例えばYoutuberのHIKAKINさんはその1人です。HIKAKINさんはヒューマンビートボックスを極め、それを自身の動画投稿に取り入れることにより一躍人気者になりました。</p><p>人気が出たのは誰もそのようなことをやっておらず、新鮮だったということがあると思います。ヒューマンビートボックスにハマり、動画投稿にハマり、自身の面白いを追求した結果、トップYoutuberになることができたのです。</p><p>このように世の中にないものには、計画を立ててそれを遂行するというやり方では到底到達できません。道はただ1つ。ハマってハマって追求するということです。</p><p>自身の面白いはとてつもなく大きな可能性を秘めています。今は何も可能性がないように思えるかもしれません。しかし、その面白いにハマり追求することで当初は見えなかった道が見えてくるはずです。</p><p>これは山登りに似ています。山の麓からは山しか見えません。山を登っていくうちにどんどん視界が開けて行きます。上から見ると、今まで見えなかった道が見えることでしょう。遠いと思っていた頂上も実際に歩いてみると、案外登頂できるものです。</p><p>実際にやってみると想像していたものと違うということもあることでしょう。その場合はさっとさとやめればいいのです。思い立ったらすぐやって、さっさと飽きて次に行く。飽きるということにネガティブなイメージを抱く人もいるでしょうが、飽きるということは経験し、そこからなにかしら学んだということです。どんどん飽きて、次の新しい経験を積めばよいのです。そのほうがたくさん学ぶことができます。飽きた数こそがあなたが成長した証です。</p><p>このように計画を立てずに面白そうなことはどんどんやる。飽きたらまた別の面白いことをやる。そうやって経験を積み、学んでいくことで、結果的にその経験が組み合わさって面白いことができるようになると思うのです。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;この記事は前回の続きです。前回の記事は「&lt;a href=&quot;/blog/2018/10/12/not-goal/&quot;&gt;計画はいらない&lt;/a&gt;」です。&lt;/p&gt;
&lt;p&gt;「好きなことをひたすら追いかければよい」理由は、そのほうがうまくいく可能性が高いからです。&lt;/p&gt;
&lt;p&gt;世の中に
      
    
    </summary>
    
    
    
      <category term="コラム" scheme="https://48n.jp/tags/%E3%82%B3%E3%83%A9%E3%83%A0/"/>
    
  </entry>
  
  <entry>
    <title>計画はいらない</title>
    <link href="https://48n.jp/blog/2018/10/12/not-goal/"/>
    <id>https://48n.jp/blog/2018/10/12/not-goal/</id>
    <published>2018-10-12T07:35:56.000Z</published>
    <updated>2021-07-08T09:52:20.222Z</updated>
    
    <content type="html"><![CDATA[<p>2018年もあと3ヶ月で終わろうとしています。少し早いですが、2018年を振り返ってみると、良いことも良くないことも含めて様々なことがありました。結果的に近年で最も濃い1年になりました。</p><p>私自身は今年を特別な1年にしようなどとは微塵も考えていませんでした。また、何かを達成しようと詳細な計画をたてたりもしていません。しかし、結果的には今まで経験したことのないことをいくつか経験することができました。</p><p>ここで言いたいことは「計画していないけどうまくいった」ということです。</p><p>私はこのような経験を積むにつれて、計画を立てるのはあまり意味のないことなのではないか、と考えるようになりました。明確な計画を立て地道に進むというのは一見素晴らしいように思えます。しかし、実際は計画通りにいかないことがほとんどです。もし計画通りにいけば、みんな子供の頃に夢見たスポーツ選手や芸能人になっていることでしょう。</p><p>私たちは経験則で人生とは計画通りにいかないことを知っています。しかし、計画を立てようとしがちです。そして、年の暮れには「計画が達成できなかった。自分は無能な人間だ」と自分を蔑みます。そんなことに何の価値があるのでしょうか。ほとんどが失敗する計画をなぜ立てるのでしょうか。</p><p>いい加減、そのようなことはやめたほうがいいのではないかと思うわけです。私は「好きなことをひたすら追いかければよい」と思います。</p><p>理由についてはまた書いていきたいと思います。</p><p> <a href="/blog/2018/10/15/not-goal-2/">&gt;&gt; 好きなことをひたすら追いかければよい</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2018年もあと3ヶ月で終わろうとしています。少し早いですが、2018年を振り返ってみると、良いことも良くないことも含めて様々なことがありました。結果的に近年で最も濃い1年になりました。&lt;/p&gt;
&lt;p&gt;私自身は今年を特別な1年にしようなどとは微塵も考えていませんでした。また
      
    
    </summary>
    
    
    
      <category term="コラム" scheme="https://48n.jp/tags/%E3%82%B3%E3%83%A9%E3%83%A0/"/>
    
  </entry>
  
  <entry>
    <title>Developers Summit 2018 FUKUOKAに登壇します</title>
    <link href="https://48n.jp/blog/2018/09/05/before-developers-summit-2018-fukuoka/"/>
    <id>https://48n.jp/blog/2018/09/05/before-developers-summit-2018-fukuoka/</id>
    <published>2018-09-05T10:40:36.000Z</published>
    <updated>2021-07-08T09:52:20.218Z</updated>
    
    <content type="html"><![CDATA[<p>2018年9月7日にアクロス福岡で開催される <a href="https://event.shoeisha.jp/devsumi/20180906" target="_blank">Developers Summit 2018 FUKUOKA</a>(デブサミ福岡)に登壇します。<br>明日はどのような話しから入ろうかがまだ決まっていなくて、どうしようかと考えています。</p><p>発表内容は0からはじまった開発チームが、どのようにチームとしてまとまっていき、アプリケーション開発を成功させることができたかという事例の紹介となります。</p><ul><li><a href="https://event.shoeisha.jp/devsumi/20180906/session/1775/" target="_blank">Y!Jカード天神チームの立ち上げからこれまで</a></li></ul><p>デブサミ福岡のような大きなイベントに登壇するのは今回が初めてなので、うまくできるか不安ではありますが、精一杯やりたいと思っています。もし、当日会場に来られる方がいれば是非、お声がけください。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2018年9月7日にアクロス福岡で開催される &lt;a href=&quot;https://event.shoeisha.jp/devsumi/20180906&quot; target=&quot;_blank&quot;&gt;Developers Summit 2018 FUKUOKA&lt;/a&gt;(デブサミ福岡)に登壇
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>最短でビデオチャットを開発したい人へ</title>
    <link href="https://48n.jp/blog/2018/08/07/started-video-chat/"/>
    <id>https://48n.jp/blog/2018/08/07/started-video-chat/</id>
    <published>2018-08-07T05:23:15.000Z</published>
    <updated>2021-07-08T09:52:20.222Z</updated>
    
    <content type="html"><![CDATA[<p>ビデオチャットを最短で作りたいと考えている人への備忘録です。次の手順に沿って開発すると4時間程度でビデオチャットを開発できます。</p><ol><li><a href="#1-webrtcの概要を把握する">WebRTCの概要を把握する</a></li><li><a href="#2-webrtcのコードを動かしてみる">WebRTCのコードを動かしてみる</a></li><li><a href="#3-webrtcの開発を支援するサービスを利用する">WebRTCの開発を支援するサービスを利用する</a></li></ol><h2 id="1-WebRTCの概要を把握する"><a href="#1-WebRTCの概要を把握する" class="headerlink" title="1. WebRTCの概要を把握する"></a>1. WebRTCの概要を把握する</h2><p>まずはWebRTCについての概要を把握しておくと、実装するときの理解が深まります。まずは、次の記事を読んでください。</p><ul><li><a href="https://gist.github.com/voluntas/67e5a26915751226fdcf" target="_blank">WebRTC コトハジメ</a></li></ul><p>同じタイトルですが、Qiitaのこの記事もわかりやすいです。</p><ul><li><a href="https://qiita.com/yusuke84/items/286f569d110daede721e" target="_blank">WebRTC コトハジメ</a></li></ul><h2 id="2-WebRTCのコードを動かしてみる"><a href="#2-WebRTCのコードを動かしてみる" class="headerlink" title="2. WebRTCのコードを動かしてみる"></a>2. WebRTCのコードを動かしてみる</h2><p>上記の記事を読んだら、早速コードを動かしてみましょう。コードを実際に動かしてみることで、着実にWebRTCの概念を理解していくことができます。</p><p>次の記事で簡単にPCのカメラの映像をブラウザに表示できることが体感してください。</p><ul><li><a href="https://html5experts.jp/mganeko/19728/" target="_blank">カメラを使ってみよう ーWebRTC入門2016</a></li></ul><p>次の記事でシグナリングの流れを掴みましょう。</p><ul><li><a href="https://html5experts.jp/mganeko/19814/" target="_blank">手動でWebRTCの通信をつなげよう ーWebRTC入門2016</a></li></ul><h2 id="3-WebRTCの開発を支援するサービスを利用する"><a href="#3-WebRTCの開発を支援するサービスを利用する" class="headerlink" title="3. WebRTCの開発を支援するサービスを利用する"></a>3. WebRTCの開発を支援するサービスを利用する</h2><p>本格的なビデオチャットを開発するのはなかなか大変です。その開発を楽にしてくれるサービスが世の中に存在します。私がおすすめするのはSkyWayというサービスです。このサービスを利用することでNAT越えなどの仕組みを自分で実装せずにすみます。日本語ドキュメントが整備されており、サービス自体も無料で試すことができます。</p><ul><li><a href="https://webrtc.ecl.ntt.com/" target="_blank">SkyWay</a></li></ul><p>SkyWayを利用するにあたっては、次のスライドが参考になります。</p><ul><li><a href="https://www.slideshare.net/iwashi86/skyway-how-to-use-skyway-webrtc" target="_blank">SkyWayを使いこなすために - How to use SkyWay (WebRTC)</a></li></ul><p>余談ですが、WebRTCのライブラリであるPeerJSはメンテされてないので使わない方がよいです。</p><ul><li><a href="https://medium.com/@Tukimikage/peerjs%E3%82%92%E4%BB%8A%E5%BE%8C%E3%82%82%E4%BD%BF%E3%81%84%E7%B6%9A%E3%81%91%E3%82%8B%E3%81%AE%E3%81%AF%E5%8D%B1%E9%99%BA-8c3cf68d56a0" target="_blank">PeerJSを今後も使い続けるのは危険</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ビデオチャットを最短で作りたいと考えている人への備忘録です。次の手順に沿って開発すると4時間程度でビデオチャットを開発できます。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#1-webrtcの概要を把握する&quot;&gt;WebRTCの概要を把握する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a 
      
    
    </summary>
    
    
    
      <category term="開発" scheme="https://48n.jp/tags/%E9%96%8B%E7%99%BA/"/>
    
  </entry>
  
  <entry>
    <title>デュアルスイーパーカスタムのフジツボスポーツクラブの立ち回り（ガチエリア編）</title>
    <link href="https://48n.jp/blog/2018/07/10/how-to-winning-method-dual-sweeper-custome-in-the-fujitsubo/"/>
    <id>https://48n.jp/blog/2018/07/10/how-to-winning-method-dual-sweeper-custome-in-the-fujitsubo/</id>
    <published>2018-07-10T00:39:55.000Z</published>
    <updated>2021-07-08T09:52:20.218Z</updated>
    
    <content type="html"><![CDATA[<p>スプラトゥーン2のデュアルスイーパーカスタムのフジツボスポーツクラブの立ち回り（ガチエリア編）を解説します。</p><p>フジツボスポーツクラブはデュアルスイーパーのような射程の長い武器は戦いづらいステージです。というのも、高低差が多く平らなスペースが少ないからです。塗り状況が悪い中で無理して中央のエリアに出て行ってもすぐに倒されてしまいます。</p><h2 id="デュアルスイーパーカスタムのフジツボスポーツクラブの立ち回り（ガチエリア編）"><a href="#デュアルスイーパーカスタムのフジツボスポーツクラブの立ち回り（ガチエリア編）" class="headerlink" title="デュアルスイーパーカスタムのフジツボスポーツクラブの立ち回り（ガチエリア編）"></a>デュアルスイーパーカスタムのフジツボスポーツクラブの立ち回り（ガチエリア編）</h2><p>デュアルスイーパーの強ポジは自陣左側のスポンジです。スポンジを膨らませて、そこから中央高台にスプラッシュボムを投げます。このスプラッシュボムがかなり効果的です。というのも、エリアのルール上、中央高台には多くのイカが集まるので、スプラッシュボムが当たりやすいのです。また、自陣左側に敵が侵入してくることは少ないのでデスを抑えることができます。</p><p>数的優位がとれるまではスポンジの上からスプラッシュボムを投げる。数的優位が取れたら、中央に出て行ってエリアを押さえる。この動きができれば勝てます。</p><h2 id="オススメのギア"><a href="#オススメのギア" class="headerlink" title="オススメのギア"></a>オススメのギア</h2><p>オススメのギアはサブ性能アップとサブインク効率アップです。サブ性能アップをつけると、スプラッシュボムの飛距離が伸びるため、より遠くの敵までボムが届くようになります。また、サブインク効率アップでより多くのボムを投げることができます。</p><p>空いたスペースには、インク回復アップとスペシャル増加量アップを積んでいます。これは、スプラッシュボムを投げる回数を増やすためとスペシャルのアメフラシの回数をあげるためです。アメフラシは相手の前線を強制的に下げさせることができるため、エリアの打開時にうってつけのスペシャルです。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;スプラトゥーン2のデュアルスイーパーカスタムのフジツボスポーツクラブの立ち回り（ガチエリア編）を解説します。&lt;/p&gt;
&lt;p&gt;フジツボスポーツクラブはデュアルスイーパーのような射程の長い武器は戦いづらいステージです。というのも、高低差が多く平らなスペースが少ないからです。塗り
      
    
    </summary>
    
    
    
      <category term="スプラトゥーン2" scheme="https://48n.jp/tags/%E3%82%B9%E3%83%97%E3%83%A9%E3%83%88%E3%82%A5%E3%83%BC%E3%83%B32/"/>
    
  </entry>
  
  <entry>
    <title>1つのMTGが午前中をダメにする</title>
    <link href="https://48n.jp/blog/2018/07/05/why-the-morning-is-wasted-on-one-meeting/"/>
    <id>https://48n.jp/blog/2018/07/05/why-the-morning-is-wasted-on-one-meeting/</id>
    <published>2018-07-05T07:34:33.000Z</published>
    <updated>2021-07-08T09:52:20.222Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>基本的に、予定があることがわかっている時は、何も仕事を終わらせられません。時計を見て｢1時間後に会議があるから、この大事な仕事はまだやらないほうがいいな｣と思ったり、1時間を20分くらいに感じるせいか、一番小さな仕事ですら無意識のうちに先延ばしにします。</p></blockquote><p><a href="https://www.lifehacker.jp/2018/07/overscheduling-your-days-can-wreck-your-productivity.html" target="_blank">生産的な1日は｢予定を入れすぎない｣ことからはじまる</a></p><p>30分後にMTGが予定されているだけで次の仕事をやる気がしなくなります。中途半端にやるくらいなら、MTGが終わってからやろうと思うからです。そして、MTGが終わると何だか疲れてしまい、少し休憩してからやろうと思います。さて、休憩もしたので仕事に取り掛かったのもつかの間、昼休みになります。このような感じで午前中に1つMTGが入っただけで、ほとんど生産的なことができずに午前中が終わってしまいます。たった30分のMTGが午前中をダメにしてしまいます。</p><p>このMTGのように、それ自身は些細な時間でも与える影響は大きいものです。その影響についても考える必要があります。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;基本的に、予定があることがわかっている時は、何も仕事を終わらせられません。時計を見て｢1時間後に会議があるから、この大事な仕事はまだやらないほうがいいな｣と思ったり、1時間を20分くらいに感じるせいか、一番小さな仕事ですら無意識のうちに先延ばしにし
      
    
    </summary>
    
    
    
      <category term="コラム" scheme="https://48n.jp/tags/%E3%82%B3%E3%83%A9%E3%83%A0/"/>
    
  </entry>
  
  <entry>
    <title>サッカー日本代表がベスト16にしかなれない理由</title>
    <link href="https://48n.jp/blog/2018/07/03/soccer-2018/"/>
    <id>https://48n.jp/blog/2018/07/03/soccer-2018/</id>
    <published>2018-07-03T02:49:13.000Z</published>
    <updated>2021-07-08T09:52:20.222Z</updated>
    
    <content type="html"><![CDATA[<p>サッカー日本代表がW杯の決勝トーナメントでベルギーに敗れ、ベスト16になりました。日本のメディアは大いに日本の選手を称えています。この世論の雰囲気こそがサッカー日本代表がベスト16にしかなれない理由だと思います。</p><p>もちろん、予選を突破してベスト16に入ったのはすごいことです。しかし、W杯で優勝するようなチームにとってベスト16に入るのは当たり前のことなのです。優勝候補のブラジルが決勝トーナメントの1回戦で負けたらブラジルの世論はなんと言うでしょうか。おそらく、酷いバッシングをするはずです。</p><p>この空気がブラジル代表の選手たちの潜在意識に強く影響をしているわけです。ブラジルの選手たちはベスト16で勝つのは当たり前。絶対に負けられないと100%信じているはずです。</p><p>対して、日本代表の選手たちはベスト16になったことで少なからず何処かに満足感があると思います。これは選手たちのせいではなく、日本の世論が作り出している雰囲気のせいです。</p><p>開催国のほとんどが予選を突破して決勝トーナメントに進出するのも同じ理由です。自国開催のチームは絶対に予選を突破しないといけないと潜在意識に強く刷り込まれているわけです。</p><p>日本の空気感こそがサッカー日本代表の最大の壁だと思います。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;サッカー日本代表がW杯の決勝トーナメントでベルギーに敗れ、ベスト16になりました。日本のメディアは大いに日本の選手を称えています。この世論の雰囲気こそがサッカー日本代表がベスト16にしかなれない理由だと思います。&lt;/p&gt;
&lt;p&gt;もちろん、予選を突破してベスト16に入ったのは
      
    
    </summary>
    
    
    
      <category term="コラム" scheme="https://48n.jp/tags/%E3%82%B3%E3%83%A9%E3%83%A0/"/>
    
  </entry>
  
  <entry>
    <title>明日は台風なのでリモートワークします</title>
    <link href="https://48n.jp/blog/2018/07/02/typhoon-tomorrow/"/>
    <id>https://48n.jp/blog/2018/07/02/typhoon-tomorrow/</id>
    <published>2018-07-02T08:23:02.000Z</published>
    <updated>2021-07-08T09:52:20.222Z</updated>
    
    <content type="html"><![CDATA[<p>明日は台風なのでリモートワークをします。リモートワーク制度があるので都合のいい時間に自分の働きたい場所で働くことができます。リモートワーク制度のいいところは、「台風がそれたから出社になった」なんてことがないことです。最初からリモートワークをすると決まっていれば朝はゆっくりと過ごすことができます。</p><p>朝から会社の判断を待ってどうするかが決まるなんてわずらわしくないですか。出社を判断する方も大変でしょう。会社が判断するのではなくて個々人で判断すればいいのです。会社で働いたほうが都合がいい人は会社で働けばいいですし、会社以外で働いたほうが都合がいい人はリモートワークをすればいいだけです。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;明日は台風なのでリモートワークをします。リモートワーク制度があるので都合のいい時間に自分の働きたい場所で働くことができます。リモートワーク制度のいいところは、「台風がそれたから出社になった」なんてことがないことです。最初からリモートワークをすると決まっていれば朝はゆっくりと
      
    
    </summary>
    
    
    
      <category term="コラム" scheme="https://48n.jp/tags/%E3%82%B3%E3%83%A9%E3%83%A0/"/>
    
  </entry>
  
  <entry>
    <title>SetterとBuilderの使いわけ</title>
    <link href="https://48n.jp/blog/2018/06/29/use-of-setter-or-builder/"/>
    <id>https://48n.jp/blog/2018/06/29/use-of-setter-or-builder/</id>
    <published>2018-06-29T08:39:49.000Z</published>
    <updated>2021-07-08T09:52:20.222Z</updated>
    
    <content type="html"><![CDATA[<p>先日、「SetterとBuilderはどのように使いわければいいのか？」という質問を受けました。なかなかよい質問ですね。Builderを使うとクラスのインスタンスを柔軟に作ることができます。Builderを使ったサンプルコードです。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">User user = User.builder()</span><br><span class="line">        .lastName(<span class="string">"山田"</span>)</span><br><span class="line">        .firstName(<span class="string">"太郎"</span>)</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure><p>Builderを実装したUserクラスのサンプルコードです。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String firstName;</span><br><span class="line"></span><br><span class="line">    User(String lastName, String firstName) &#123;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">        <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserBuilder <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserBuilder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBuilder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String lastName;</span><br><span class="line">        <span class="keyword">private</span> String firstName;</span><br><span class="line"></span><br><span class="line">        UserBuilder() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> UserBuilder <span class="title">lastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> UserBuilder <span class="title">firstName</span><span class="params">(String firstName)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> User <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> User(lastName, firstName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Setterを使うと次のようになります(実装は省略)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setLastName(<span class="string">"山田"</span>);</span><br><span class="line">user.setFirstName(<span class="string">"太郎"</span>);</span><br></pre></td></tr></table></figure><p>Setterの問題点として、インスタンスの状態を変更してしまうことがあります。イミュータブルな実装にする場合、原則としてコンストラクタで値は設定するべきでSetterで変更するべきではありません。</p><p>では、Setterではなくコンストラクタで設定するようにしましょう。引数が少ないうちは問題がないのですが、次の例のように引数の数が増えてしまうとコードが煩雑になってしまいます。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 姓、名、年齢、血液型、国が引数のコンストラクタの例</span></span><br><span class="line"><span class="comment">// 年齢と血液型は不明だが、nullを指定する必要がある</span></span><br><span class="line">User user = <span class="keyword">new</span> User(<span class="string">"山田"</span>, <span class="string">"太郎"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="string">"日本"</span>);</span><br></pre></td></tr></table></figure><p>そこで、Builderを使うメリットが出てきます。Builderを使えば柔軟にパラメーターの設定が行えるようになります。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">User user = User.builder()</span><br><span class="line">        .lastName(<span class="string">"山田"</span>)</span><br><span class="line">        .firstName(<span class="string">"太郎"</span>)</span><br><span class="line">        .country(<span class="string">"日本"</span>)</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure><p>SetterもBuilderもやりたいことはオブジェクトにパラメーターをセットすることです。Setterを使うとオブジェクトの状態を変更してしまうことになります。イミュータブルな実装かつ柔軟にパラメーターを設定したい場合はBuilderを使いましょう。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先日、「SetterとBuilderはどのように使いわければいいのか？」という質問を受けました。なかなかよい質問ですね。Builderを使うとクラスのインスタンスを柔軟に作ることができます。Builderを使ったサンプルコードです。&lt;/p&gt;
&lt;figure class=&quot;h
      
    
    </summary>
    
    
    
      <category term="Java" scheme="https://48n.jp/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>そろそろlombokから卒業しようと考えています</title>
    <link href="https://48n.jp/blog/2018/06/29/graduate-from-lombok/"/>
    <id>https://48n.jp/blog/2018/06/29/graduate-from-lombok/</id>
    <published>2018-06-29T06:26:49.000Z</published>
    <updated>2021-07-08T09:52:20.218Z</updated>
    
    <content type="html"><![CDATA[<p>便利な<a href="https://projectlombok.org/" target="_blank">lombok</a>ですが、そろそろオワコンな感じがしています。理由はJavaのアップデートに追従することが困難になってきているからです。詳しくは<a href="https://qiita.com/tmurakam99/items/b5ffe7f18bc06577f619" target="_blank">Lombok の Java9以降対応</a>の記事に書いてあります。実際、Java9対応も遅かったですね。lombokを使い続けると、Javaのアップデートに追従していけなくなる未来が想像できます。</p><p>Spring Bootも2系からはlombokは使っていませんね。</p><p>lombokは便利ですが、別に無くてもなんとかなるライブラリなので、あえてこれから使う選択をする必要はないと思います。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;便利な&lt;a href=&quot;https://projectlombok.org/&quot; target=&quot;_blank&quot;&gt;lombok&lt;/a&gt;ですが、そろそろオワコンな感じがしています。理由はJavaのアップデートに追従することが困難になってきているからです。詳しくは&lt;a href=
      
    
    </summary>
    
    
    
      <category term="Java" scheme="https://48n.jp/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>リモートワークは効率が悪いはウソ</title>
    <link href="https://48n.jp/blog/2018/06/28/about-remote-work/"/>
    <id>https://48n.jp/blog/2018/06/28/about-remote-work/</id>
    <published>2018-06-28T05:42:53.000Z</published>
    <updated>2021-07-08T09:52:20.218Z</updated>
    
    <content type="html"><![CDATA[<p>ここ最近は週に1回ほどリモートワークで働いています。プログラミングであればリモートワークで問題ないです。</p><p>リモートワークの利点として会議に出なくていいことがあります。会社にいると何かと会議に招集されて時間や集中力が奪われてしまいますが、リモートワークであればその心配はありません。本当に出る必要がある会議であればリモートで参加すればいいですし、多くの場合は対面で話さずともドキュメントベースのコミュニケーションで事足ります。</p><p>ほかにも通勤時間が不要になることで1日に余裕ができるメリットがあります。私は往復で通勤時間に2時間が必要です。リモートワークにすればこの2時間が自由に使えるようになります。通勤時間がない分、早めに仕事を切り上げてその後の時間は子供と遊んだりできます。</p><p>リモートワークだと集中できない、生産性が下がるという意見がありますが、実際にやってみるとそんなデメリットはありませんでした。オフィスより家の方が集中できます。なぜなら、集中するには静かな場所が必要だからです。テレビがついているような騒がしい場所で集中することは難しいのです。オフィスはテレビがついている部屋と大して変わらないと思います。</p><p>リモートワーク導入で生産性が下がるのではないかという意見もありますが、そんなことはありません。通勤時間がなくなるうえ、集中できる環境であれば生産性が上がるのは当然でしょう。コミュニケーションが必要な時はSlackなどのツールを利用すればよいです。ただし、100％リモートワークとなるとコミュニケーションの問題が出てくるであろうというのはわかります。ですので、オフィスワークとリモートワークのハイブリットがバランスがよいのではないでしょうか。</p><p>頑張って残業するよりリモートワークを取り入れましょう。そのほうが生産性があがり社員の満足度もあがりますよ。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ここ最近は週に1回ほどリモートワークで働いています。プログラミングであればリモートワークで問題ないです。&lt;/p&gt;
&lt;p&gt;リモートワークの利点として会議に出なくていいことがあります。会社にいると何かと会議に招集されて時間や集中力が奪われてしまいますが、リモートワークであればそ
      
    
    </summary>
    
    
    
      <category term="コラム" scheme="https://48n.jp/tags/%E3%82%B3%E3%83%A9%E3%83%A0/"/>
    
  </entry>
  
</feed>
