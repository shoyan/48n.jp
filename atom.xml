<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SHOYAN BLOG</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://48n.jp/"/>
  <updated>2025-06-06T02:24:55.125Z</updated>
  <id>https://48n.jp/</id>
  
  <author>
    <name>Shohei Yamasaki</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Slack Block Kitの制約とデザインパターンガイド</title>
    <link href="https://48n.jp/blog/2025/06/05/slack-block-kit-detailed-guide/"/>
    <id>https://48n.jp/blog/2025/06/05/slack-block-kit-detailed-guide/</id>
    <published>2025-06-05T02:00:00.000Z</published>
    <updated>2025-06-06T02:24:55.125Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>前回の記事「<a href="/2025/06/04/go-slack-notification-guide/">GoでSlack通知を実装する方法</a>」では、Slack通知の基本的な実装方法とBlock Kitの初歩的な使い方について解説しました。</p><p>今回は、Slack Block Kitをより深く掘り下げて、その特性、制約、そして効果的なデザインパターンについて詳しく説明します。特に、Block Kitの「見た目があまり変えられない」という特性と、その制約の中でいかに美しく機能的なメッセージを作成するかに焦点を当てます。</p><h2 id="Slack-Block-Kitの特性と制約"><a href="#Slack-Block-Kitの特性と制約" class="headerlink" title="Slack Block Kitの特性と制約"></a>Slack Block Kitの特性と制約</h2><h3 id="1-デザインの統一性と制約"><a href="#1-デザインの統一性と制約" class="headerlink" title="1. デザインの統一性と制約"></a>1. デザインの統一性と制約</h3><p>Slack Block Kitの最も大きな特徴は、<strong>デザインの自由度が意図的に制限されている</strong>ことです。これにはいくつかの理由があります。</p><ul><li><strong>一貫性の確保</strong>: すべてのアプリからのメッセージが統一された見た目になる</li><li><strong>可読性の向上</strong>: Slackの標準UIパターンに従うことで、ユーザーが迷わない</li><li><strong>アクセシビリティ</strong>: スクリーンリーダーやキーボードナビゲーションに配慮</li></ul><h3 id="2-制約の具体例"><a href="#2-制約の具体例" class="headerlink" title="2. 制約の具体例"></a>2. 制約の具体例</h3><p>以下のような点でカスタマイズが制限されています。</p><ul><li><strong>色の変更</strong>: テキストやブロックの背景色は基本的に変更不可</li><li><strong>フォントサイズ</strong>: 固定のフォントサイズ体系</li><li><strong>余白・レイアウト</strong>: ブロック間の余白やレイアウトは Slack側で制御</li><li><strong>アニメーション</strong>: 動的な効果は実装不可</li></ul><p>これらの制約があるからこそ、<strong>コンテンツの構成とブロックの組み合わせ</strong>が重要になります。</p><h2 id="Block-Kitの主要ブロックタイプ解説"><a href="#Block-Kitの主要ブロックタイプ解説" class="headerlink" title="Block Kitの主要ブロックタイプ解説"></a>Block Kitの主要ブロックタイプ解説</h2><p>実際のサンプルコードを基に、各ブロックタイプの特性と使用例を詳しく見てみましょう。</p><h3 id="1-Header-ブロック"><a href="#1-Header-ブロック" class="headerlink" title="1. Header ブロック"></a>1. Header ブロック</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"header"</span>,</span><br><span class="line">    <span class="attr">"text"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"plain_text"</span>,</span><br><span class="line">        <span class="attr">"text"</span>: <span class="string">"Slack Block Kitデザインシステム見本"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特徴:</strong></p><ul><li>メッセージの最上部に配置される大きなタイトル</li><li>plain_textのみ対応（Markdownは使用不可）</li><li>絵文字を使用することで視覚的なアクセントを追加可能</li></ul><p><strong>使用場面:</strong></p><ul><li>通知のタイトル</li></ul><h3 id="2-Section-ブロック"><a href="#2-Section-ブロック" class="headerlink" title="2. Section ブロック"></a>2. Section ブロック</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"section"</span>,</span><br><span class="line">    <span class="attr">"text"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"mrkdwn"</span>,</span><br><span class="line">        <span class="attr">"text"</span>: <span class="string">"*1. 基本的なセクション*\nこれは基本的なセクションブロックです。*太字*や_斜体_、~取り消し線~、`コード`などのMarkdown書式が使えます。"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特徴:</strong></p><ul><li>最も汎用的で使用頻度が高いブロック</li><li>Markdownによる豊富なテキスト装飾</li><li>accessoryフィールドで画像やボタンを右側に配置可能</li></ul><p><strong>応用例 - 画像付きセクション:</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"section"</span>,</span><br><span class="line">    <span class="attr">"text"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"mrkdwn"</span>,</span><br><span class="line">        <span class="attr">"text"</span>: <span class="string">"画像を右側に配置できます"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"accessory"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"image"</span>,</span><br><span class="line">        <span class="attr">"image_url"</span>: <span class="string">"https://api.slack.com/img/blocks/bkb_template_images/beagle.png"</span>,</span><br><span class="line">        <span class="attr">"alt_text"</span>: <span class="string">"かわいい犬の画像"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Context-ブロック"><a href="#3-Context-ブロック" class="headerlink" title="3. Context ブロック"></a>3. Context ブロック</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"context"</span>,</span><br><span class="line">    <span class="attr">"elements"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"mrkdwn"</span>,</span><br><span class="line">            <span class="attr">"text"</span>: <span class="string">"👆 Contextブロックは小さいテキストで補足情報を表示するのに最適です"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特徴:</strong></p><ul><li>小さなフォントサイズで表示</li><li>補足情報や注釈に最適</li><li>複数の要素を横並びで配置可能</li></ul><p><strong>使用場面:</strong></p><ul><li>タイムスタンプ</li><li>作成者情報</li><li>追加の説明文</li></ul><h3 id="4-Divider-ブロック"><a href="#4-Divider-ブロック" class="headerlink" title="4. Divider ブロック"></a>4. Divider ブロック</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"divider"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特徴:</strong></p><ul><li>シンプルな水平線</li><li>セクション間の視覚的な区切り</li><li>パラメータ不要で最もシンプルなブロック</li></ul><h3 id="5-Actions-ブロック"><a href="#5-Actions-ブロック" class="headerlink" title="5. Actions ブロック"></a>5. Actions ブロック</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"actions"</span>,</span><br><span class="line">    <span class="attr">"elements"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"button"</span>,</span><br><span class="line">            <span class="attr">"text"</span>: &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"plain_text"</span>,</span><br><span class="line">                <span class="attr">"text"</span>: <span class="string">"Primary ボタン"</span>,</span><br><span class="line">                <span class="attr">"emoji"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"style"</span>: <span class="string">"primary"</span>,</span><br><span class="line">            <span class="attr">"value"</span>: <span class="string">"primary_button"</span>,</span><br><span class="line">            <span class="attr">"url"</span>: <span class="string">"https://example.com/primary"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特徴:</strong></p><ul><li>ボタンやその他のインタラクティブ要素を配置</li><li>最大5つの要素まで横並び配置可能</li><li>3つのボタンスタイル：default（境界線のみ）、primary（青色）、danger（赤色）</li></ul><h2 id="制約の中での効果的なデザインパターン"><a href="#制約の中での効果的なデザインパターン" class="headerlink" title="制約の中での効果的なデザインパターン"></a>制約の中での効果的なデザインパターン</h2><h3 id="1-疑似的な枠線の実装"><a href="#1-疑似的な枠線の実装" class="headerlink" title="1. 疑似的な枠線の実装"></a>1. 疑似的な枠線の実装</h3><p>Block Kitには明確な「枠線」がありませんが、以下のようなテクニックで視覚的なグループ化を実現できます。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"section"</span>,</span><br><span class="line"><span class="attr">"text"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"mrkdwn"</span>,</span><br><span class="line"><span class="attr">"text"</span>: <span class="string">"*2. 擬似的な枠線付きセクション*"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"section"</span>,</span><br><span class="line"><span class="attr">"text"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"mrkdwn"</span>,</span><br><span class="line"><span class="attr">"text"</span>: <span class="string">"```項目:値```"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"section"</span>,</span><br><span class="line"><span class="attr">"text"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"mrkdwn"</span>,</span><br><span class="line"><span class="attr">"text"</span>: <span class="string">"```ステータス:完了```"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>工夫のポイント:</strong></p><ul><li>Markdownを使用した疑似的な枠線</li></ul><h3 id="2-状態表示のパターン"><a href="#2-状態表示のパターン" class="headerlink" title="2. 状態表示のパターン"></a>2. 状態表示のパターン</h3><p>色が変更できない制約の中で、絵文字とテキストを組み合わせて状態を表現。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"section"</span>,</span><br><span class="line">    <span class="attr">"text"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"mrkdwn"</span>,</span><br><span class="line">        <span class="attr">"text"</span>: <span class="string">"• *&lt;https://example.com/task/goals|目標の基本を学ぶ&gt;*\n  :alarm_clock: 2024年9月24日"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"section"</span>,</span><br><span class="line">    <span class="attr">"text"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"mrkdwn"</span>,</span><br><span class="line">        <span class="attr">"text"</span>: <span class="string">"• *&lt;https://example.com/task/personal-goals|個人目標設定の方法を学ぶ&gt;*\n  :warning: 2024年9月24日（期限超過）"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用される表現方法:</strong></p><ul><li><code>:alarm_clock:</code> - 通常の期限</li><li><code>:warning:</code> - 期限超過や注意</li><li><code>:white_check_mark:</code> - 完了</li><li><code>:x:</code> - エラーやキャンセル</li></ul><h3 id="3-複数ボタンのレイアウトパターン"><a href="#3-複数ボタンのレイアウトパターン" class="headerlink" title="3. 複数ボタンのレイアウトパターン"></a>3. 複数ボタンのレイアウトパターン</h3><p>Actionsブロックでは、最大5つまでのボタンを配置できます。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"actions"</span>,</span><br><span class="line">    <span class="attr">"elements"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"button"</span>,</span><br><span class="line">            <span class="attr">"text"</span>: &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"plain_text"</span>,</span><br><span class="line">                <span class="attr">"text"</span>: <span class="string">"確認"</span>,</span><br><span class="line">                <span class="attr">"emoji"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"style"</span>: <span class="string">"primary"</span>,</span><br><span class="line">            <span class="attr">"value"</span>: <span class="string">"confirm"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"button"</span>,</span><br><span class="line">            <span class="attr">"text"</span>: &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"plain_text"</span>,</span><br><span class="line">                <span class="attr">"text"</span>: <span class="string">"後で"</span>,</span><br><span class="line">                <span class="attr">"emoji"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"value"</span>: <span class="string">"later"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"button"</span>,</span><br><span class="line">            <span class="attr">"text"</span>: &#123;</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"plain_text"</span>,</span><br><span class="line">                <span class="attr">"text"</span>: <span class="string">"キャンセル"</span>,</span><br><span class="line">                <span class="attr">"emoji"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"style"</span>: <span class="string">"danger"</span>,</span><br><span class="line">            <span class="attr">"value"</span>: <span class="string">"cancel"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>デザインの考慮点:</strong></p><ul><li>Primary（青色）は最重要アクション用</li><li>Default（境界線のみ）は通常アクション用</li><li>Danger（赤色）は削除や危険なアクション用</li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>Slack Block Kitは確かに「見た目があまり変えられない」という制約がありますが、これらの制約を理解し、適切にブロックを組み合わせることで、美しく機能的なメッセージを作成できます。</p><p>重要なのは以下の点です。</p><ol><li><strong>制約を受け入れる</strong>: デザインの自由度は制限されているが、その分一貫性と可読性が保たれる</li><li><strong>コンテンツ構成に集中</strong>: 色やレイアウトではなく、情報の構造化と優先順位付けに注力</li><li><strong>パターンの活用</strong>: 疑似的な枠線や絵文字による状態表現など、制約内でのテクニックを習得</li></ol><p>Block Kitの詳細なリファレンスは<a href="https://app.slack.com/block-kit-builder" target="_blank" rel="noopener">Slack Block Kit Builder</a>で実際に構築しながら確認できますので、ぜひご活用ください。</p><p>この記事で紹介したテクニックのサンプルもぜひご利用ください！</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"blocks"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"header"</span>,</span><br><span class="line"><span class="attr">"text"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"plain_text"</span>,</span><br><span class="line"><span class="attr">"text"</span>: <span class="string">"Slack Block Kitデザインシステム見本"</span>,</span><br><span class="line"><span class="attr">"emoji"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"section"</span>,</span><br><span class="line"><span class="attr">"text"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"mrkdwn"</span>,</span><br><span class="line"><span class="attr">"text"</span>: <span class="string">"こんにちは、鈴木 太郎さん\nこちらはデザインパターンの総合的な見本です。"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"divider"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"section"</span>,</span><br><span class="line"><span class="attr">"text"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"mrkdwn"</span>,</span><br><span class="line"><span class="attr">"text"</span>: <span class="string">"*1. 基本的なセクション*\nこれは基本的なセクションブロックです。 *太字* や _斜体_ 、 ~取り消し線~ 、 `コード` などのMarkdown書式が使えます。"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"context"</span>,</span><br><span class="line"><span class="attr">"elements"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"mrkdwn"</span>,</span><br><span class="line"><span class="attr">"text"</span>: <span class="string">"👆 Contextブロックは小さいテキストで補足情報を表示するのに最適です"</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"divider"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"section"</span>,</span><br><span class="line"><span class="attr">"text"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"mrkdwn"</span>,</span><br><span class="line"><span class="attr">"text"</span>: <span class="string">"*2. 擬似的な枠線付きセクション*"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"section"</span>,</span><br><span class="line"><span class="attr">"text"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"mrkdwn"</span>,</span><br><span class="line"><span class="attr">"text"</span>: <span class="string">"```項目:値```"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"section"</span>,</span><br><span class="line"><span class="attr">"text"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"mrkdwn"</span>,</span><br><span class="line"><span class="attr">"text"</span>: <span class="string">"```ステータス:完了```"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"divider"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"section"</span>,</span><br><span class="line"><span class="attr">"text"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"mrkdwn"</span>,</span><br><span class="line"><span class="attr">"text"</span>: <span class="string">"*3. リンク付きのテキスト*"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"section"</span>,</span><br><span class="line"><span class="attr">"text"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"mrkdwn"</span>,</span><br><span class="line"><span class="attr">"text"</span>: <span class="string">"• *&lt;https://example.com/task/1|リンク付きタスク名&gt;*\n  2024年9月24日"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"section"</span>,</span><br><span class="line"><span class="attr">"text"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"mrkdwn"</span>,</span><br><span class="line"><span class="attr">"text"</span>: <span class="string">"• リンクなしタスク名\n  2024年9月25日"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"divider"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"section"</span>,</span><br><span class="line"><span class="attr">"text"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"mrkdwn"</span>,</span><br><span class="line"><span class="attr">"text"</span>: <span class="string">"*4. 画像付きセクション*"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"section"</span>,</span><br><span class="line"><span class="attr">"text"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"mrkdwn"</span>,</span><br><span class="line"><span class="attr">"text"</span>: <span class="string">"画像を右側に配置できます"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"accessory"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"image"</span>,</span><br><span class="line"><span class="attr">"image_url"</span>: <span class="string">"https://api.slack.com/img/blocks/bkb_template_images/beagle.png"</span>,</span><br><span class="line"><span class="attr">"alt_text"</span>: <span class="string">"かわいい犬の画像"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"divider"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"section"</span>,</span><br><span class="line"><span class="attr">"text"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"mrkdwn"</span>,</span><br><span class="line"><span class="attr">"text"</span>: <span class="string">"*5. ボタンとアクション*"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"actions"</span>,</span><br><span class="line"><span class="attr">"elements"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"button"</span>,</span><br><span class="line"><span class="attr">"text"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"plain_text"</span>,</span><br><span class="line"><span class="attr">"text"</span>: <span class="string">"Primary ボタン"</span>,</span><br><span class="line"><span class="attr">"emoji"</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"style"</span>: <span class="string">"primary"</span>,</span><br><span class="line"><span class="attr">"value"</span>: <span class="string">"primary_button"</span>,</span><br><span class="line"><span class="attr">"url"</span>: <span class="string">"https://example.com/primary"</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"actions"</span>,</span><br><span class="line"><span class="attr">"elements"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"button"</span>,</span><br><span class="line"><span class="attr">"text"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"plain_text"</span>,</span><br><span class="line"><span class="attr">"text"</span>: <span class="string">"Default ボタン（アウトライン）"</span>,</span><br><span class="line"><span class="attr">"emoji"</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"value"</span>: <span class="string">"default_button"</span>,</span><br><span class="line"><span class="attr">"url"</span>: <span class="string">"https://example.com/default"</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"actions"</span>,</span><br><span class="line"><span class="attr">"elements"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"button"</span>,</span><br><span class="line"><span class="attr">"text"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"plain_text"</span>,</span><br><span class="line"><span class="attr">"text"</span>: <span class="string">"Danger ボタン"</span>,</span><br><span class="line"><span class="attr">"emoji"</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"style"</span>: <span class="string">"danger"</span>,</span><br><span class="line"><span class="attr">"value"</span>: <span class="string">"danger_button"</span>,</span><br><span class="line"><span class="attr">"url"</span>: <span class="string">"https://example.com/danger"</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"divider"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"section"</span>,</span><br><span class="line"><span class="attr">"text"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"mrkdwn"</span>,</span><br><span class="line"><span class="attr">"text"</span>: <span class="string">"*6. 通知カード*"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"context"</span>,</span><br><span class="line"><span class="attr">"elements"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"mrkdwn"</span>,</span><br><span class="line"><span class="attr">"text"</span>: <span class="string">"┌──────────────────────────────────────────┐"</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"section"</span>,</span><br><span class="line"><span class="attr">"text"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"mrkdwn"</span>,</span><br><span class="line"><span class="attr">"text"</span>: <span class="string">"　*【オンボーディング】入社後1ヶ月間のTODO*"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"section"</span>,</span><br><span class="line"><span class="attr">"text"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"mrkdwn"</span>,</span><br><span class="line"><span class="attr">"text"</span>: <span class="string">"　*社員*"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"section"</span>,</span><br><span class="line"><span class="attr">"text"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"mrkdwn"</span>,</span><br><span class="line"><span class="attr">"text"</span>: <span class="string">"　佐藤 花子、田中 一郎、山田 太郎"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"context"</span>,</span><br><span class="line"><span class="attr">"elements"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"mrkdwn"</span>,</span><br><span class="line"><span class="attr">"text"</span>: <span class="string">"└──────────────────────────────────────────┘"</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"actions"</span>,</span><br><span class="line"><span class="attr">"elements"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"button"</span>,</span><br><span class="line"><span class="attr">"text"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"plain_text"</span>,</span><br><span class="line"><span class="attr">"text"</span>: <span class="string">"コースを確認"</span>,</span><br><span class="line"><span class="attr">"emoji"</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"style"</span>: <span class="string">"primary"</span>,</span><br><span class="line"><span class="attr">"value"</span>: <span class="string">"check_course"</span>,</span><br><span class="line"><span class="attr">"url"</span>: <span class="string">"https://example.com/onboarding/course"</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"divider"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"section"</span>,</span><br><span class="line"><span class="attr">"text"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"mrkdwn"</span>,</span><br><span class="line"><span class="attr">"text"</span>: <span class="string">"*7. タスクリスト（期限付き）*"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"section"</span>,</span><br><span class="line"><span class="attr">"text"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"mrkdwn"</span>,</span><br><span class="line"><span class="attr">"text"</span>: <span class="string">"• *&lt;https://example.com/task/goals|目標の基本を学ぶ&gt;*\n  :alarm_clock: 2024年9月24日"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"section"</span>,</span><br><span class="line"><span class="attr">"text"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"mrkdwn"</span>,</span><br><span class="line"><span class="attr">"text"</span>: <span class="string">"• *&lt;https://example.com/task/management|代表的なマネジメントの型を知る&gt;*\n  :alarm_clock: 2024年9月25日"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"section"</span>,</span><br><span class="line"><span class="attr">"text"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"mrkdwn"</span>,</span><br><span class="line"><span class="attr">"text"</span>: <span class="string">"• *&lt;https://example.com/task/personal-goals|個人目標設定の方法を学ぶ&gt;*\n  :warning: 2024年9月24日（期限超過）"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"divider"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"section"</span>,</span><br><span class="line"><span class="attr">"text"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"mrkdwn"</span>,</span><br><span class="line"><span class="attr">"text"</span>: <span class="string">"*8. 複数ボタン配置*"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"actions"</span>,</span><br><span class="line"><span class="attr">"elements"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"button"</span>,</span><br><span class="line"><span class="attr">"text"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"plain_text"</span>,</span><br><span class="line"><span class="attr">"text"</span>: <span class="string">"確認"</span>,</span><br><span class="line"><span class="attr">"emoji"</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"style"</span>: <span class="string">"primary"</span>,</span><br><span class="line"><span class="attr">"value"</span>: <span class="string">"confirm"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"button"</span>,</span><br><span class="line"><span class="attr">"text"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"plain_text"</span>,</span><br><span class="line"><span class="attr">"text"</span>: <span class="string">"後で"</span>,</span><br><span class="line"><span class="attr">"emoji"</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"value"</span>: <span class="string">"later"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"button"</span>,</span><br><span class="line"><span class="attr">"text"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"plain_text"</span>,</span><br><span class="line"><span class="attr">"text"</span>: <span class="string">"キャンセル"</span>,</span><br><span class="line"><span class="attr">"emoji"</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"style"</span>: <span class="string">"danger"</span>,</span><br><span class="line"><span class="attr">"value"</span>: <span class="string">"cancel"</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"divider"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"context"</span>,</span><br><span class="line"><span class="attr">"elements"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"mrkdwn"</span>,</span><br><span class="line"><span class="attr">"text"</span>: <span class="string">"このメッセージはデザインシステムの参考用に自動生成されました"</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;前回の記事「&lt;a href=&quot;/2025/06/04/go-slack-notification-guide/&quot;&gt;GoでSl
      
    
    </summary>
    
    
      <category term="プログラミング" scheme="https://48n.jp/categories/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"/>
    
    
      <category term="Slack" scheme="https://48n.jp/tags/Slack/"/>
    
      <category term="API" scheme="https://48n.jp/tags/API/"/>
    
      <category term="Block Kit" scheme="https://48n.jp/tags/Block-Kit/"/>
    
      <category term="UI" scheme="https://48n.jp/tags/UI/"/>
    
      <category term="デザイン" scheme="https://48n.jp/tags/%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>GoでSlack通知を実装する方法</title>
    <link href="https://48n.jp/blog/2025/06/04/go-slack-notification-guide/"/>
    <id>https://48n.jp/blog/2025/06/04/go-slack-notification-guide/</id>
    <published>2025-06-04T01:30:00.000Z</published>
    <updated>2025-06-06T02:24:55.119Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>Slackは現代のチーム開発において欠かせないコミュニケーションツールです。システムからの通知やアラート、定期的なレポートなど、様々な情報をSlackに送信することで、チーム全体での情報共有を効率化できます。</p><p>この記事では、Goを使ってSlackに通知を送信する方法を、基本的なテキストメッセージから高度なBlock Kitを使ったリッチなメッセージまで、実際のコード例とともに解説します。</p><h2 id="使用するライブラリ"><a href="#使用するライブラリ" class="headerlink" title="使用するライブラリ"></a>使用するライブラリ</h2><p>今回は、<a href="https://github.com/slack-go/slack" target="_blank" rel="noopener"><code>github.com/slack-go/slack</code></a>というGoの公式Slackクライアントライブラリを使用します。このライブラリは活発に開発されており、Slack APIの最新機能もサポートしています。</p><h2 id="セットアップ"><a href="#セットアップ" class="headerlink" title="セットアップ"></a>セットアップ</h2><h3 id="1-Slackアプリの作成とトークンの取得"><a href="#1-Slackアプリの作成とトークンの取得" class="headerlink" title="1. Slackアプリの作成とトークンの取得"></a>1. Slackアプリの作成とトークンの取得</h3><p>まず、<a href="https://api.slack.com/apps" target="_blank" rel="noopener">Slack API</a>でアプリを作成し、Bot User OAuth Tokenを取得する必要があります。</p><ol><li>Slack APIのページにアクセス</li><li>“Create New App” → “From scratch”でアプリを作成</li><li>“OAuth &amp; Permissions”から必要な権限を設定<ul><li><code>users:read</code> - ユーザー一覧の取得</li><li><code>chat:write</code> - メッセージの送信</li><li><code>im:write</code> - ダイレクトメッセージの送信</li></ul></li><li>Bot User OAuth Tokenをコピー</li></ol><h3 id="2-環境変数の設定"><a href="#2-環境変数の設定" class="headerlink" title="2. 環境変数の設定"></a>2. 環境変数の設定</h3><p>取得したトークンを環境変数として設定します。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> SLACK_BOT_TOKEN=<span class="string">"xoxb-your-token-here"</span></span><br></pre></td></tr></table></figure><h2 id="基本的な実装"><a href="#基本的な実装" class="headerlink" title="基本的な実装"></a>基本的な実装</h2><h3 id="Slackクライアントの初期化"><a href="#Slackクライアントの初期化" class="headerlink" title="Slackクライアントの初期化"></a>Slackクライアントの初期化</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"log"</span></span><br><span class="line">    <span class="string">"os"</span></span><br><span class="line">    <span class="string">"github.com/slack-go/slack"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Slack APIトークンを環境変数から取得</span></span><br><span class="line">    token := os.Getenv(<span class="string">"SLACK_BOT_TOKEN"</span>)</span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">""</span> &#123;</span><br><span class="line">        log.Fatal(<span class="string">"SLACK_BOT_TOKEN is not set"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Slackクライアントの初期化</span></span><br><span class="line">    api := slack.New(token)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ユーザー一覧の取得"><a href="#ユーザー一覧の取得" class="headerlink" title="ユーザー一覧の取得"></a>ユーザー一覧の取得</h3><p>通知を送信する前に、まずワークスペース内のユーザー一覧を取得してみましょう。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getUsers</span><span class="params">(api *slack.Client)</span></span> &#123;</span><br><span class="line">    <span class="comment">// ユーザー一覧を取得</span></span><br><span class="line">    users, err := api.GetUsers()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">"ユーザー一覧の取得に失敗しました: %v"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ユーザー情報を表示</span></span><br><span class="line">    log.Printf(<span class="string">"ワークスペース内のユーザー数: %d\n"</span>, <span class="built_in">len</span>(users))</span><br><span class="line">    <span class="keyword">for</span> i, user := <span class="keyword">range</span> users &#123;</span><br><span class="line">        <span class="comment">// 必要な情報だけを表示（すべての情報を表示するとログが長くなりすぎるため）</span></span><br><span class="line">        log.Printf(<span class="string">"%d: ID=%s, Name=%s, RealName=%s, IsBot=%v\n"</span>,</span><br><span class="line">            i+<span class="number">1</span>, user.ID, user.Name, user.RealName, user.IsBot)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="シンプルなダイレクトメッセージの送信"><a href="#シンプルなダイレクトメッセージの送信" class="headerlink" title="シンプルなダイレクトメッセージの送信"></a>シンプルなダイレクトメッセージの送信</h3><p>ユーザーIDを指定して、シンプルなテキストメッセージを送信する関数です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sendDirectMessage</span><span class="params">(api *slack.Client, userID, message <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="comment">// ユーザーとのDMチャンネルを開く</span></span><br><span class="line">    channel, _, _, err := api.OpenConversation(&amp;slack.OpenConversationParameters&#123;</span><br><span class="line">        Users: []<span class="keyword">string</span>&#123;userID&#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">"DMチャンネルを開けませんでした: %v"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// DMを送信</span></span><br><span class="line">    _, _, err = api.PostMessage(</span><br><span class="line">        channel.ID,</span><br><span class="line">        slack.MsgOptionText(message, <span class="literal">false</span>),</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">"DMの送信に失敗しました: %v"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.Printf(<span class="string">"ユーザー %s にDMを送信しました"</span>, userID)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Block-Kitを使った高度なメッセージ"><a href="#Block-Kitを使った高度なメッセージ" class="headerlink" title="Block Kitを使った高度なメッセージ"></a>Block Kitを使った高度なメッセージ</h2><p>Slack Block Kitを使用すると、画像、ボタン、フォーマットされたテキストなどを含む、より視覚的にリッチなメッセージを作成できます。</p><h3 id="Block-Kitメッセージの構築"><a href="#Block-Kitメッセージの構築" class="headerlink" title="Block Kitメッセージの構築"></a>Block Kitメッセージの構築</h3><p>以下は、様々なBlock Kit要素を含むサンプルメッセージの構築例です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">buildSampleBlockKit</span><span class="params">()</span> <span class="title">slack</span>.<span class="title">MsgOption</span></span> &#123;</span><br><span class="line">    <span class="comment">// Block Kitを使ったメッセージの構築</span></span><br><span class="line">    headerText := slack.NewTextBlockObject(<span class="string">"mrkdwn"</span>, <span class="string">"*ブロックキットのサンプル*"</span>, <span class="literal">false</span>, <span class="literal">false</span>)</span><br><span class="line">    headerSection := slack.NewSectionBlock(headerText, <span class="literal">nil</span>, <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// テキストブロック</span></span><br><span class="line">    textBlock := slack.NewTextBlockObject(<span class="string">"mrkdwn"</span>, <span class="string">"これは `Block Kit` を使ったメッセージです。\n*太字* や _斜体_ などのMarkdownも使えます！"</span>, <span class="literal">false</span>, <span class="literal">false</span>)</span><br><span class="line">    textSection := slack.NewSectionBlock(textBlock, <span class="literal">nil</span>, <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 画像ブロック</span></span><br><span class="line">    accessory := slack.NewImageBlockElement(<span class="string">"https://api.slack.com/img/blocks/bkb_template_images/beagle.png"</span>, <span class="string">"犬の画像"</span>)</span><br><span class="line">    imageText := slack.NewTextBlockObject(<span class="string">"mrkdwn"</span>, <span class="string">"こちらはかわいい犬の画像です :dog:"</span>, <span class="literal">false</span>, <span class="literal">false</span>)</span><br><span class="line">    imageSection := slack.NewSectionBlock(imageText, <span class="literal">nil</span>, slack.NewAccessory(accessory))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ボタン要素</span></span><br><span class="line">    btnText := slack.NewTextBlockObject(<span class="string">"plain_text"</span>, <span class="string">"クリックしてください"</span>, <span class="literal">false</span>, <span class="literal">false</span>)</span><br><span class="line">    btn := slack.NewButtonBlockElement(<span class="string">"click_button"</span>, <span class="string">"button_clicked"</span>, btnText)</span><br><span class="line">    btnAccessory := slack.NewAccessory(btn)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ボタンセクション</span></span><br><span class="line">    btnSectionText := slack.NewTextBlockObject(<span class="string">"mrkdwn"</span>, <span class="string">"アクションを実行するには:"</span>, <span class="literal">false</span>, <span class="literal">false</span>)</span><br><span class="line">    btnSection := slack.NewSectionBlock(btnSectionText, <span class="literal">nil</span>, btnAccessory)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 区切り線</span></span><br><span class="line">    divider := slack.NewDividerBlock()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// フッターブロック</span></span><br><span class="line">    footerText := slack.NewTextBlockObject(<span class="string">"mrkdwn"</span>, <span class="string">"Block Kitの詳細は &lt;https://api.slack.com/block-kit|こちら&gt; をご覧ください"</span>, <span class="literal">false</span>, <span class="literal">false</span>)</span><br><span class="line">    footerSection := slack.NewSectionBlock(footerText, <span class="literal">nil</span>, <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// すべてのブロックを一つのメッセージにまとめる</span></span><br><span class="line">    <span class="keyword">return</span> slack.MsgOptionBlocks(</span><br><span class="line">        headerSection,</span><br><span class="line">        divider,</span><br><span class="line">        textSection,</span><br><span class="line">        imageSection,</span><br><span class="line">        divider,</span><br><span class="line">        btnSection,</span><br><span class="line">        divider,</span><br><span class="line">        footerSection,</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Block-Kitメッセージの送信"><a href="#Block-Kitメッセージの送信" class="headerlink" title="Block Kitメッセージの送信"></a>Block Kitメッセージの送信</h3><p>構築したBlock Kitメッセージを送信する関数です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sendDirectMessageWithBlocks</span><span class="params">(api *slack.Client, userID <span class="keyword">string</span>, blocks slack.MsgOption)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="comment">// ユーザーとのDMチャンネルを開く</span></span><br><span class="line">    channel, _, _, err := api.OpenConversation(&amp;slack.OpenConversationParameters&#123;</span><br><span class="line">        Users: []<span class="keyword">string</span>&#123;userID&#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">"DMチャンネルを開けませんでした: %v"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ブロックキットメッセージを送信</span></span><br><span class="line">    _, _, err = api.PostMessage(</span><br><span class="line">        channel.ID,</span><br><span class="line">        blocks,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">"DMの送信に失敗しました: %v"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.Printf(<span class="string">"ユーザー %s にブロックキットDMを送信しました"</span>, userID)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完全なサンプルコード"><a href="#完全なサンプルコード" class="headerlink" title="完全なサンプルコード"></a>完全なサンプルコード</h2><p>以下が、これまでの機能をすべて含んだ完全なサンプルです。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Slack APIトークンを環境変数から取得</span></span><br><span class="line">    token := os.Getenv(<span class="string">"SLACK_BOT_TOKEN"</span>)</span><br><span class="line">    <span class="keyword">if</span> token == <span class="string">""</span> &#123;</span><br><span class="line">        log.Fatal(<span class="string">"SLACK_BOT_TOKEN is not set"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Slackクライアントの初期化</span></span><br><span class="line">    api := slack.New(token)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ユーザー一覧を取得して表示</span></span><br><span class="line">    getUsers(api)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 特定のユーザーにDMを送信</span></span><br><span class="line">    userID := <span class="string">"U02K6JU8D"</span> <span class="comment">// 実際のユーザーIDに置き換えてください</span></span><br><span class="line">    err := sendDirectMessage(api, userID, <span class="string">"これはテストメッセージです！"</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">"DMの送信に失敗しました: %v"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ブロックキットを使用したDMを送信</span></span><br><span class="line">    blocks := buildSampleBlockKit()</span><br><span class="line">    err = sendDirectMessageWithBlocks(api, userID, blocks)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">"ブロックキットDMの送信に失敗しました: %v"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="実行方法"><a href="#実行方法" class="headerlink" title="実行方法"></a>実行方法</h2><ol><li><p>依存関係をインストール：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go mod tidy</span><br></pre></td></tr></table></figure></li><li><p>環境変数を設定：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> SLACK_BOT_TOKEN=<span class="string">"xoxb-your-token"</span></span><br></pre></td></tr></table></figure></li><li><p>プログラムを実行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run main.go</span><br></pre></td></tr></table></figure></li></ol><h2 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h2><ol><li><p><strong>レート制限</strong>: Slack APIにはレート制限があります。大量のメッセージを送信する場合は、適切な間隔を設けましょう。</p></li><li><p><strong>エラーハンドリング</strong>: 本番環境では、ネットワークエラーやAPI制限エラーに対する適切なリトライ機構を実装することを推奨します。</p></li><li><p><strong>ユーザーID</strong>: 実際の運用では、ユーザー名からユーザーIDを動的に取得する仕組みを構築することが一般的です。</p></li><li><p><strong>セキュリティ</strong>: Slack APIトークンは機密情報です。ソースコードに直接記述せず、必ず環境変数や設定ファイルから読み込むようにしてください。</p></li></ol><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>この記事では、Goを使ったSlack通知の実装方法を、基本的なテキストメッセージから高度なBlock Kitを使ったリッチなメッセージまで幅広く解説しました。</p><p><code>github.com/slack-go/slack</code>ライブラリを使用することで、Slack APIの豊富な機能を簡単に利用できます。システム監視、定期レポート、チーム内通知など、様々な用途でSlack通知を活用して、より効率的なチーム開発を実現してください。</p><p>Block Kitの詳細については、<a href="https://app.slack.com/block-kit-builder" target="_blank" rel="noopener">Slack Block Kit Builder</a>で実際にブロックを構築しながら学習することをおすすめします。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;Slackは現代のチーム開発において欠かせないコミュニケーションツールです。システムからの通知やアラート、定期的なレポートな
      
    
    </summary>
    
    
      <category term="プログラミング" scheme="https://48n.jp/categories/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"/>
    
    
      <category term="Go" scheme="https://48n.jp/tags/Go/"/>
    
      <category term="Slack" scheme="https://48n.jp/tags/Slack/"/>
    
      <category term="API" scheme="https://48n.jp/tags/API/"/>
    
      <category term="通知" scheme="https://48n.jp/tags/%E9%80%9A%E7%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>Go言語でAsynqにレート制限を実装する</title>
    <link href="https://48n.jp/blog/2025/06/03/asynq-rate-limiter-implementation-guide/"/>
    <id>https://48n.jp/blog/2025/06/03/asynq-rate-limiter-implementation-guide/</id>
    <published>2025-06-03T03:00:00.000Z</published>
    <updated>2025-06-06T02:24:55.117Z</updated>
    
    <content type="html"><![CDATA[<p>タスクキューは多くのWebアプリケーションで必要不可欠な機能ですが、大量のタスクを処理する際にはレート制限が重要になります。特に外部API呼び出しやメール送信などのタスクでは、適切なレート制限なしに処理すると、サービス制限に引っかかったり、相手先のサーバーに負荷をかけてしまう可能性があります。</p><p>今回は、Go言語の人気タスクキューライブラリである<a href="https://github.com/hibiken/asynq" target="_blank" rel="noopener">Asynq</a>にレート制限を実装する方法を、複数のアプローチとともに解説します。</p><h2 id="プロジェクト構成"><a href="#プロジェクト構成" class="headerlink" title="プロジェクト構成"></a>プロジェクト構成</h2><p>このサンプルプロジェクトは以下の構成になっています。</p><ul><li><a href="https://github.com/shoyan/asynq-late-limiter" target="_blank" rel="noopener">サンプルコード</a>はGitHubで公開しています。</li></ul><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">asynq-late-limiter/</span><br><span class="line">├── <span class="built_in">go</span>.<span class="built_in">mod</span></span><br><span class="line">├── tasks/</span><br><span class="line">│   └── tasks.<span class="built_in">go</span>          # タスクの定義と処理ロジック</span><br><span class="line">├── limiter/</span><br><span class="line">│   ├── limiter.<span class="built_in">go</span>        # Limiterインターフェース</span><br><span class="line">│   ├── rate_limiter.<span class="built_in">go</span>   # golang.org/x/<span class="built_in">time</span>/rateを使った実装</span><br><span class="line">│   ├── redis_rate_limiter.<span class="built_in">go</span>  # Redisベースの実装（シンプル版）</span><br><span class="line">│   ├── redis_rate_limiterv2.<span class="built_in">go</span> # Redisベースの実装（改良版）</span><br><span class="line">├── producer/</span><br><span class="line">│   └── main.<span class="built_in">go</span>           # タスクを生成するプロデューサー</span><br><span class="line">└── worker/</span><br><span class="line">    └── main.<span class="built_in">go</span>           # タスクを処理するワーカー</span><br></pre></td></tr></table></figure><h2 id="1-インターフェース設計"><a href="#1-インターフェース設計" class="headerlink" title="1. インターフェース設計"></a>1. インターフェース設計</h2><p>まず、レート制限の基盤となるインターフェースを定義します。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// limiter/limiter.go</span></span><br><span class="line"><span class="keyword">package</span> limiter</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// レート制限を確認し、エラーを返す</span></span><br><span class="line"><span class="keyword">type</span> Limiter <span class="keyword">interface</span> &#123;</span><br><span class="line">    Check() error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// RateLimitErrorは、レート制限が超過されたときに発生するエラー</span></span><br><span class="line"><span class="keyword">type</span> RateLimitError <span class="keyword">struct</span> &#123;</span><br><span class="line">    RetryIn time.Duration</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *RateLimitError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">"rate limited (retry in %v)"</span>, e.RetryIn)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このインターフェース設計により、異なるレート制限の実装を簡単に差し替えることができます。</p><h2 id="2-レート制限の実装方式"><a href="#2-レート制限の実装方式" class="headerlink" title="2. レート制限の実装方式"></a>2. レート制限の実装方式</h2><h3 id="2-1-golang-org-x-time-rateを使った実装"><a href="#2-1-golang-org-x-time-rateを使った実装" class="headerlink" title="2.1 golang.org/x/time/rateを使った実装"></a>2.1 golang.org/x/time/rateを使った実装</h3><p>標準的なトークンバケットアルゴリズムを使った実装です。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// limiter/rate_limiter.go</span></span><br><span class="line"><span class="keyword">type</span> RateLimiter <span class="keyword">struct</span> &#123;</span><br><span class="line">    limiter *rate.Limiter</span><br><span class="line">    limit   <span class="keyword">int</span>           <span class="comment">// 1秒間に処理できるリクエスト数</span></span><br><span class="line">    burst   <span class="keyword">int</span>           <span class="comment">// 瞬間的に許可される最大リクエスト数</span></span><br><span class="line">    retryIn time.Duration <span class="comment">// レート制限時の再試行待機時間</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewRateLimiter</span><span class="params">(limit <span class="keyword">int</span>, burst <span class="keyword">int</span>, retryIn time.Duration)</span> *<span class="title">RateLimiter</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &amp;RateLimiter&#123;</span><br><span class="line">        limiter: rate.NewLimiter(rate.Limit(limit), burst),</span><br><span class="line">        limit:   limit,</span><br><span class="line">        burst:   burst,</span><br><span class="line">        retryIn: retryIn,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(rl *RateLimiter)</span> <span class="title">Check</span><span class="params">()</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> !rl.limiter.Allow() &#123;</span><br><span class="line">        <span class="keyword">return</span> &amp;RateLimitError&#123;</span><br><span class="line">            RetryIn: rl.retryIn,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>メリット</strong></p><ul><li>実装が簡単</li><li>メモリ効率が良い</li><li>高速</li></ul><p><strong>デメリット</strong></p><ul><li>単一プロセスでのみ動作</li><li>分散環境では使用できない</li></ul><h3 id="2-2-Redisベースの実装（改良版）"><a href="#2-2-Redisベースの実装（改良版）" class="headerlink" title="2.2 Redisベースの実装（改良版）"></a>2.2 Redisベースの実装（改良版）</h3><p>複数のワーカープロセス間でレート制限を共有する場合に適しています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// limiter/redis_rate_limiterv2.go</span></span><br><span class="line"><span class="keyword">type</span> RedisRateLimiterV2 <span class="keyword">struct</span> &#123;</span><br><span class="line">    client     *redis.Client</span><br><span class="line">    key        <span class="keyword">string</span></span><br><span class="line">    limit      <span class="keyword">int</span></span><br><span class="line">    windowSize time.Duration</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(r *RedisRateLimiterV2)</span> <span class="title">Allow</span><span class="params">(taskType <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">bool</span>, <span class="keyword">int64</span>, error)</span></span> &#123;</span><br><span class="line">    ctx := context.Background()</span><br><span class="line">    key := fmt.Sprintf(<span class="string">"rate_limit:%s"</span>, taskType)</span><br><span class="line">    now := time.Now().Unix()</span><br><span class="line"></span><br><span class="line">    script := <span class="string">`</span></span><br><span class="line"><span class="string">        local key = KEYS[1]</span></span><br><span class="line"><span class="string">        local limit = tonumber(ARGV[1])</span></span><br><span class="line"><span class="string">        local window = tonumber(ARGV[2])</span></span><br><span class="line"><span class="string">        local now = tonumber(ARGV[3])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        -- 古いエントリを削除</span></span><br><span class="line"><span class="string">        redis.call("ZREMRANGEBYSCORE", key, "-inf", now - window)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        -- 現在のリクエスト数を取得</span></span><br><span class="line"><span class="string">        local count = redis.call("ZCOUNT", key, "-inf", "+inf")</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        if count &gt;= limit then</span></span><br><span class="line"><span class="string">            -- 最も古いリクエストのタイムスタンプを取得</span></span><br><span class="line"><span class="string">            local oldest = redis.call("ZRANGE", key, 0, 0, "WITHSCORES")</span></span><br><span class="line"><span class="string">            local retryIn = 0.0</span></span><br><span class="line"><span class="string">            if #oldest &gt; 0 then</span></span><br><span class="line"><span class="string">                retryIn = math.max(0, oldest[2] + window - now)</span></span><br><span class="line"><span class="string">            end</span></span><br><span class="line"><span class="string">            return &#123;0, retryIn&#125;</span></span><br><span class="line"><span class="string">        end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        -- 新しいリクエストを追加</span></span><br><span class="line"><span class="string">        redis.call("ZADD", key, now, tostring(now) .. "-" .. redis.call("INCR", "request_counter"))</span></span><br><span class="line"><span class="string">        redis.call("EXPIRE", key, window)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        return &#123;1, 0&#125;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line"></span><br><span class="line">    result, err := r.client.Eval(ctx, script, []<span class="keyword">string</span>&#123;key&#125;, r.limit, <span class="keyword">int</span>(r.windowSize.Seconds()), now).Result()</span><br><span class="line">    <span class="comment">// ... エラーハンドリングと結果の解析</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>メリット</strong></p><ul><li>分散環境での動作</li><li>複数のワーカー間でレート制限を共有</li><li>正確な待機時間の算出</li></ul><p><strong>デメリット</strong></p><ul><li>Redisへの依存</li><li>わずかなパフォーマンスオーバーヘッド</li></ul><h2 id="3-Asynqとの統合"><a href="#3-Asynqとの統合" class="headerlink" title="3. Asynqとの統合"></a>3. Asynqとの統合</h2><h3 id="タスクの定義"><a href="#タスクの定義" class="headerlink" title="タスクの定義"></a>タスクの定義</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tasks/tasks.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">EmailNotificationTask</span><span class="params">(ctx context.Context, t *asynq.Task, limit limiter.Limiter)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">    <span class="comment">// レート制限を確認</span></span><br><span class="line">    <span class="keyword">if</span> err := limit.Check(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// メール送信処理</span></span><br><span class="line">    <span class="keyword">var</span> payload <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></span><br><span class="line">    <span class="keyword">if</span> err := json.Unmarshal(t.Payload(), &amp;payload); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> err</span><br><span class="line">    &#125;</span><br><span class="line">    log.Println(<span class="string">"Sending Email to:"</span>, payload[<span class="string">"email"</span>], <span class="string">"with subject:"</span>, payload[<span class="string">"subject"</span>])</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ワーカーの設定"><a href="#ワーカーの設定" class="headerlink" title="ワーカーの設定"></a>ワーカーの設定</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// worker/main.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 1秒間1リクエストに制限</span></span><br><span class="line">    emailRateLimiter := limiter.NewRedisRateLimiterV2(<span class="string">"email"</span>, <span class="number">1</span>, time.Second)</span><br><span class="line"></span><br><span class="line">    srv := asynq.NewServer(</span><br><span class="line">        asynq.RedisClientOpt&#123;Addr: <span class="string">":6379"</span>&#125;,</span><br><span class="line">        asynq.Config&#123;</span><br><span class="line">            Concurrency: <span class="number">5</span>,</span><br><span class="line">            Queues: <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;</span><br><span class="line">                <span class="string">"default"</span>: <span class="number">7</span>,</span><br><span class="line">                <span class="string">"email"</span>:   <span class="number">3</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// レート制限エラーを失敗としてカウントしない</span></span><br><span class="line">            IsFailure: <span class="function"><span class="keyword">func</span><span class="params">(err error)</span> <span class="title">bool</span></span> &#123; </span><br><span class="line">                <span class="keyword">return</span> !IsRateLimitError(err) </span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 再試行の間隔を指定</span></span><br><span class="line">            RetryDelayFunc: retryDelay,</span><br><span class="line">            DelayedTaskCheckInterval: <span class="number">100</span> * time.Millisecond,</span><br><span class="line">        &#125;,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    mux := asynq.NewServeMux()</span><br><span class="line">    mux.HandleFunc(tasks.TypeEmailTask, <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context, t *asynq.Task)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">        <span class="comment">// TaskにRateLimiterを設定する</span></span><br><span class="line">        <span class="keyword">return</span> tasks.EmailNotificationTask(ctx, t, emailRateLimiter)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> err := srv.Run(mux); err != <span class="literal">nil</span> &#123;</span><br><span class="line">        log.Fatalf(<span class="string">"サーバーを起動できませんでした: %v"</span>, err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="エラーハンドリングとリトライ戦略"><a href="#エラーハンドリングとリトライ戦略" class="headerlink" title="エラーハンドリングとリトライ戦略"></a>エラーハンドリングとリトライ戦略</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// レート制限エラーの判定</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsRateLimitError</span><span class="params">(err error)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">    _, ok := err.(*limiter.RateLimitError)</span><br><span class="line">    <span class="keyword">return</span> ok</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// カスタムリトライ遅延</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">retryDelay</span><span class="params">(n <span class="keyword">int</span>, err error, task *asynq.Task)</span> <span class="title">time</span>.<span class="title">Duration</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> ratelimitErr *limiter.RateLimitError</span><br><span class="line">    <span class="keyword">if</span> errors.As(err, &amp;ratelimitErr) &#123;</span><br><span class="line">        <span class="keyword">return</span> ratelimitErr.RetryIn</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> asynq.DefaultRetryDelayFunc(n, err, task)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-実行方法"><a href="#4-実行方法" class="headerlink" title="4. 実行方法"></a>4. 実行方法</h2><h3 id="1-依存関係のインストール"><a href="#1-依存関係のインストール" class="headerlink" title="1. 依存関係のインストール"></a>1. 依存関係のインストール</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go mod tidy</span><br></pre></td></tr></table></figure><h3 id="2-Redisの起動"><a href="#2-Redisの起動" class="headerlink" title="2. Redisの起動"></a>2. Redisの起動</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dockerを使用する場合</span></span><br><span class="line">docker run -d -p 6380:6379 redis:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># または直接実行</span></span><br><span class="line">redis-server --port 6380</span><br></pre></td></tr></table></figure><h3 id="3-ワーカーの起動"><a href="#3-ワーカーの起動" class="headerlink" title="3. ワーカーの起動"></a>3. ワーカーの起動</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run worker/main.go</span><br></pre></td></tr></table></figure><h3 id="4-タスクの投入"><a href="#4-タスクの投入" class="headerlink" title="4. タスクの投入"></a>4. タスクの投入</h3><p>別のターミナルで以下のコマンドを実行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run producer/main.go</span><br></pre></td></tr></table></figure><h2 id="5-実装のポイント"><a href="#5-実装のポイント" class="headerlink" title="5. 実装のポイント"></a>5. 実装のポイント</h2><h3 id="レート制限の適切な設定"><a href="#レート制限の適切な設定" class="headerlink" title="レート制限の適切な設定"></a>レート制限の適切な設定</h3><ul><li><strong>外部API呼び出し</strong>: APIの制限に合わせて設定（例：100リクエスト/分）</li><li><strong>メール送信</strong>: メール送信サービスの制限に合わせて設定（例：10通/秒）</li><li><strong>データベース操作</strong>: データベースの負荷を考慮して設定</li></ul><h3 id="エラーハンドリング"><a href="#エラーハンドリング" class="headerlink" title="エラーハンドリング"></a>エラーハンドリング</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">srv := asynq.NewServer(</span><br><span class="line">    redisOpt,</span><br><span class="line">    asynq.Config&#123;</span><br><span class="line">        <span class="comment">// レート制限エラーは失敗としてカウントしない</span></span><br><span class="line">        IsFailure: <span class="function"><span class="keyword">func</span><span class="params">(err error)</span> <span class="title">bool</span></span> &#123; </span><br><span class="line">            <span class="keyword">return</span> !IsRateLimitError(err) </span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// レート制限エラーの場合は適切な待機時間でリトライ</span></span><br><span class="line">        RetryDelayFunc: retryDelay,</span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>このサンプルコードでは、Asynqにレート制限を実装する複数の方法を紹介しました。どの実装を選ぶかは、システムの要件によって決まります：</p><ul><li><strong>単一プロセス環境</strong>: <code>golang.org/x/time/rate</code>ベースの実装</li><li><strong>分散環境</strong>: Redisベースの実装</li></ul><p>インターフェースベースの設計により、後から実装を切り替えることも容易です。適切なレート制限により、安定したタスク処理システムを構築できます。</p><h2 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h2><ul><li><a href="https://github.com/hibiken/asynq" target="_blank" rel="noopener">Asynq公式ドキュメント</a></li><li><a href="https://pkg.go.dev/golang.org/x/time/rate" target="_blank" rel="noopener">golang.org/x/time/rate</a></li><li><a href="https://github.com/shoyan/asynq-late-limiter" target="_blank" rel="noopener">サンプルコード</a></li></ul>]]></content>
    
    <summary type="html">
    
      Go言語のタスクキューライブラリAsynqにレート制限を実装する方法を、複数のアプローチとともに詳しく解説します。golang.org/x/time/rateとRedisベースの実装を比較し、実用的なサンプルコードを提供します。
    
    </summary>
    
    
      <category term="プログラミング" scheme="https://48n.jp/categories/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"/>
    
    
      <category term="Go" scheme="https://48n.jp/tags/Go/"/>
    
      <category term="asynq" scheme="https://48n.jp/tags/asynq/"/>
    
      <category term="レート制限" scheme="https://48n.jp/tags/%E3%83%AC%E3%83%BC%E3%83%88%E5%88%B6%E9%99%90/"/>
    
      <category term="プログラミング" scheme="https://48n.jp/tags/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"/>
    
      <category term="タスクキュー" scheme="https://48n.jp/tags/%E3%82%BF%E3%82%B9%E3%82%AF%E3%82%AD%E3%83%A5%E3%83%BC/"/>
    
  </entry>
  
  <entry>
    <title>Go 1.24.3アップデート後のビルドエラーと解決方法</title>
    <link href="https://48n.jp/blog/2025/05/30/go-1-24-3-build-error/"/>
    <id>https://48n.jp/blog/2025/05/30/go-1-24-3-build-error/</id>
    <published>2025-05-30T07:03:12.000Z</published>
    <updated>2025-06-06T02:24:55.119Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>最近Go 1.24.3へアップデートしたところ、ローカル環境でビルドエラーが発生するようになりました。この記事では、発生した問題と解決方法について共有します。</p><h2 id="発生した問題"><a href="#発生した問題" class="headerlink" title="発生した問題"></a>発生した問題</h2><p>Go 1.24.3にアップデートした後、以下のようなエラーメッセージが表示されるようになりました。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">link: duplicated definition of symbol dlopen, from github.com<span class="regexp">/ebitengine/</span>purego and github.com<span class="regexp">/ebitengine/</span>purego (<span class="keyword">exit</span> status <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>調査の結果、このエラーはMacのIntel CPU（darwin/amd64）環境で発生する既知の問題であることがわかりました。Go公式リポジトリでも同様の問題が報告されています。</p><p><a href="https://github.com/golang/go/issues/73617" target="_blank" rel="noopener">Github Issue #73617: cmd/link: Go 1.24.3 and 1.23.9 regression - duplicated definition of symbol dlopen</a></p><h2 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h2><p>この問題は<code>github.com/ebitengine/purego</code>の最新バージョン（v0.8.3）で修正されています。以下のコマンドでpuregoをアップデートすることで解決できます。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/ebitengine/purego@v0.8.3</span><br></pre></td></tr></table></figure><p>アップデート後、ビルドが正常に完了することを確認しました。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>Go言語のバージョンアップ後にはライブラリとの互換性の問題が発生することがあります。特にGoのマイナーバージョンアップデート（1.24.2→1.24.3など）でも互換性の問題が生じる可能性があるため、ビルドエラーが発生した場合は依存ライブラリの更新も検討するとよいでしょう。</p><h2 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h2><ul><li><a href="https://github.com/golang/go/issues/73617" target="_blank" rel="noopener">Go公式リポジトリのIssue #73617</a></li><li><a href="https://github.com/ebitengine/purego/releases/tag/v0.8.3" target="_blank" rel="noopener">purego v0.8.3リリースノート</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;最近Go 1.24.3へアップデートしたところ、ローカル環境でビルドエラーが発生するようになりました。この記事では、発生した
      
    
    </summary>
    
    
      <category term="プログラミング" scheme="https://48n.jp/categories/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"/>
    
    
      <category term="Go" scheme="https://48n.jp/tags/Go/"/>
    
      <category term="トラブルシューティング" scheme="https://48n.jp/tags/%E3%83%88%E3%83%A9%E3%83%96%E3%83%AB%E3%82%B7%E3%83%A5%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0/"/>
    
  </entry>
  
  <entry>
    <title>Goのエラーハンドリングのベストプラクティス</title>
    <link href="https://48n.jp/blog/2025/05/30/go-error-handling-best-practice/"/>
    <id>https://48n.jp/blog/2025/05/30/go-error-handling-best-practice/</id>
    <published>2025-05-30T03:33:47.000Z</published>
    <updated>2025-06-06T02:24:55.119Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>Goのエラーハンドリングは他の言語と少し異なるアプローチを取ります。例外機構を持たないGoでは、エラーは値として扱われ、関数の戻り値として明示的に返されます。このシンプルなアプローチは強力ですが、効果的に活用するにはいくつかのベストプラクティスを理解する必要があります。</p><p>この記事では、Goのエラーハンドリングの基本から、カスタムエラーの作成、エラーのラッピングとアンラッピング、そして<code>errors.Is()</code>と<code>errors.As()</code>を使用した効果的なエラー判定の方法について解説します。</p><h2 id="Goのエラーハンドリングのベストプラクティス"><a href="#Goのエラーハンドリングのベストプラクティス" class="headerlink" title="Goのエラーハンドリングのベストプラクティス"></a>Goのエラーハンドリングのベストプラクティス</h2><p>Goのエラーハンドリングのベストプラクティスを理解するために、いくつかの具体例を見ていきましょう。</p><h3 id="1-基本的なエラー定義と判定"><a href="#1-基本的なエラー定義と判定" class="headerlink" title="1. 基本的なエラー定義と判定"></a>1. 基本的なエラー定義と判定</h3><p>Goでは、標準パッケージの<code>errors</code>を使って簡単にエラーを定義できます。以下のサンプルコードでは、よく使われるパターンを示しています。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"errors"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// カスタムエラー型の定義</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">ErrNotFound = errors.New(<span class="string">"not found"</span>)</span><br><span class="line">ErrInvalid  = errors.New(<span class="string">"invalid input"</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// データベース操作を模擬する関数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">findUser</span><span class="params">(id <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// エラーをラップして返す</span></span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"failed to find user: %w"</span>, ErrNotFound)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> NotFoundError <span class="keyword">struct</span> &#123;</span><br><span class="line">ID <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *NotFoundError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Sprintf(<span class="string">"user %s not found"</span>, e.ID)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 悪い例: == 演算子での比較</span></span><br><span class="line">err := findUser(<span class="string">"123"</span>)</span><br><span class="line"><span class="keyword">if</span> err == ErrNotFound &#123; <span class="comment">// これは動作しない！</span></span><br><span class="line">fmt.Println(<span class="string">"== で比較。ユーザーが見つかりませんでした"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 良い例1: errors.Is() を使用</span></span><br><span class="line">err = findUser(<span class="string">"123"</span>)</span><br><span class="line"><span class="keyword">if</span> errors.Is(err, ErrNotFound) &#123;</span><br><span class="line">fmt.Println(<span class="string">"errors.Is() で比較。ユーザーが見つかりませんでした"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = &amp;NotFoundError&#123;ID: <span class="string">"123"</span>&#125;</span><br><span class="line"><span class="keyword">var</span> notFoundErr *NotFoundError</span><br><span class="line"><span class="keyword">if</span> errors.As(err, &amp;notFoundErr) &#123;</span><br><span class="line">fmt.Printf(<span class="string">"ユーザー %s が見つかりませんでした\n"</span>, notFoundErr.ID)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// エラーのラップと展開の例</span></span><br><span class="line">err = findUser(<span class="string">"123"</span>)</span><br><span class="line">fmt.Printf(<span class="string">"元のエラー: %v\n"</span>, err)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ラップされたエラーを展開</span></span><br><span class="line">unwrapped := errors.Unwrap(err)</span><br><span class="line">fmt.Printf(<span class="string">"展開されたエラー: %v\n"</span>, unwrapped)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>実行結果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">errors.Is() で比較。ユーザーが見つかりませんでした</span><br><span class="line">ユーザー 123 が見つかりませんでした</span><br><span class="line">元のエラー: failed to find user: not found</span><br><span class="line">展開されたエラー: not found</span><br></pre></td></tr></table></figure><h3 id="2-エラー判定の種類と使い分け"><a href="#2-エラー判定の種類と使い分け" class="headerlink" title="2. エラー判定の種類と使い分け"></a>2. エラー判定の種類と使い分け</h3><p>上記のコードには、エラー判定のための重要な方法がいくつか含まれています。それぞれを詳しく解説します。</p><h4 id="エラー比較の落とし穴-演算子"><a href="#エラー比較の落とし穴-演算子" class="headerlink" title="エラー比較の落とし穴: == 演算子"></a>エラー比較の落とし穴: <code>==</code> 演算子</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 悪い例: == 演算子での比較</span></span><br><span class="line">err := findUser(<span class="string">"123"</span>)</span><br><span class="line"><span class="keyword">if</span> err == ErrNotFound &#123; <span class="comment">// これは動作しない！</span></span><br><span class="line">    fmt.Println(<span class="string">"== で比較。ユーザーが見つかりませんでした"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>このコードでは、<code>findUser</code>関数が返すエラーと<code>ErrNotFound</code>を<code>==</code>演算子で直接比較しています。しかし、このアプローチには大きな問題があります。<code>findUser</code>関数は単純に<code>ErrNotFound</code>を返すのではなく、<code>fmt.Errorf(&quot;failed to find user: %w&quot;, ErrNotFound)</code>を使ってエラーをラップしているため、<code>==</code>比較は失敗します。ラップされたエラーは元のエラーと等価ではないからです。</p><h4 id="推奨方法1-errors-Is"><a href="#推奨方法1-errors-Is" class="headerlink" title="推奨方法1: errors.Is()"></a>推奨方法1: <code>errors.Is()</code></h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 良い例1: errors.Is() を使用</span></span><br><span class="line">err = findUser(<span class="string">"123"</span>)</span><br><span class="line"><span class="keyword">if</span> errors.Is(err, ErrNotFound) &#123;</span><br><span class="line">    fmt.Println(<span class="string">"errors.Is() で比較。ユーザーが見つかりませんでした"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Go 1.13以降で導入された<code>errors.Is()</code>関数は、エラーチェーン内のどこかに特定のエラー値が含まれているかを確認します。これにより、ラップされたエラーでも正しく比較できるようになります。<code>errors.Is()</code>は、エラーが同一かどうかを確認する際の推奨方法です。</p><h4 id="推奨方法2-errors-As"><a href="#推奨方法2-errors-As" class="headerlink" title="推奨方法2: errors.As()"></a>推奨方法2: <code>errors.As()</code></h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">err = &amp;NotFoundError&#123;ID: <span class="string">"123"</span>&#125;</span><br><span class="line"><span class="keyword">var</span> notFoundErr *NotFoundError</span><br><span class="line"><span class="keyword">if</span> errors.As(err, &amp;notFoundErr) &#123;</span><br><span class="line">    fmt.Printf(<span class="string">"ユーザー %s が見つかりませんでした\n"</span>, notFoundErr.ID)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>errors.As()</code>関数は、エラーチェーン内のいずれかのエラーが特定の型に一致するかを確認し、一致する場合はその値をターゲット変数に設定します。これは、エラーの型に基づいて処理を分岐させたい場合や、エラー内の追加情報（この例では<code>ID</code>）にアクセスしたい場合に特に有用です。</p><h3 id="3-エラーのラッピングとアンラッピング"><a href="#3-エラーのラッピングとアンラッピング" class="headerlink" title="3. エラーのラッピングとアンラッピング"></a>3. エラーのラッピングとアンラッピング</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// エラーのラップと展開の例</span></span><br><span class="line">err = findUser(<span class="string">"123"</span>)</span><br><span class="line">fmt.Printf(<span class="string">"元のエラー: %v\n"</span>, err)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ラップされたエラーを展開</span></span><br><span class="line">unwrapped := errors.Unwrap(err)</span><br><span class="line">fmt.Printf(<span class="string">"展開されたエラー: %v\n"</span>, unwrapped)</span><br></pre></td></tr></table></figure><p>Go 1.13では、<code>%w</code>動詞を使用して元のエラーをラップする機能が<code>fmt.Errorf</code>に追加されました。これにより、より詳細なコンテキスト情報を提供しながら、元のエラー値を保持できます。<code>errors.Unwrap()</code>関数を使用すると、ラップされたエラーから元のエラーを取り出すことができます。</p><h3 id="4-カスタムエラー型の作成"><a href="#4-カスタムエラー型の作成" class="headerlink" title="4. カスタムエラー型の作成"></a>4. カスタムエラー型の作成</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> NotFoundError <span class="keyword">struct</span> &#123;</span><br><span class="line">    ID <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *NotFoundError)</span> <span class="title">Error</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fmt.Sprintf(<span class="string">"user %s not found"</span>, e.ID)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Goでは、<code>Error()</code>メソッドを実装した任意の型をエラーとして使用できます。カスタムエラー型を作成することで、エラーに追加情報（この例では<code>ID</code>）を含めることができ、より詳細なエラーハンドリングが可能になります。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>Goのエラー判定では、==演算子による比較はラップされたエラーに対して正しく動作しません。<br>そのため、Go1.13以降で導入された<code>errors.Is</code>や<code>errors.As</code>を活用することで、より安全かつ柔軟なエラーハンドリングが可能になります。<br>エラー処理の品質向上のため、ぜひこれらの手法を取り入れてみてください。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;Goのエラーハンドリングは他の言語と少し異なるアプローチを取ります。例外機構を持たないGoでは、エラーは値として扱われ、関数
      
    
    </summary>
    
    
      <category term="プログラミング" scheme="https://48n.jp/categories/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"/>
    
    
      <category term="Go" scheme="https://48n.jp/tags/Go/"/>
    
      <category term="プログラミング" scheme="https://48n.jp/tags/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"/>
    
      <category term="エラーハンドリング" scheme="https://48n.jp/tags/%E3%82%A8%E3%83%A9%E3%83%BC%E3%83%8F%E3%83%B3%E3%83%89%E3%83%AA%E3%83%B3%E3%82%B0/"/>
    
  </entry>
  
  <entry>
    <title>メルカリを退職してフリーランスになりました</title>
    <link href="https://48n.jp/blog/2025/02/09/resigned-from-mercari-to-become-a-freelancer/"/>
    <id>https://48n.jp/blog/2025/02/09/resigned-from-mercari-to-become-a-freelancer/</id>
    <published>2025-02-09T11:58:53.000Z</published>
    <updated>2025-02-25T01:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="自己紹介とメルカリでの経験"><a href="#自己紹介とメルカリでの経験" class="headerlink" title="自己紹介とメルカリでの経験"></a>自己紹介とメルカリでの経験</h3><p>私は 16 年ほど IT 企業でエンジニアとして働いてきました。GMO ペパボといった業界大手のサービスを運営している会社、ヤフーやメルカリといったメガベンチャー企業に勤めていました。直近はメルカリでおおよそ 3 年間働き、主に社内のカスタマーサービス部門が使うツールの開発に携わっていました。その中で GO 言語での開発経験や開発チームをマネジメントする経験を積むことができました。</p><h3 id="フリーランスになろうと思った理由"><a href="#フリーランスになろうと思った理由" class="headerlink" title="フリーランスになろうと思った理由"></a>フリーランスになろうと思った理由</h3><p>正社員としてのキャリアアップに魅力を感じなくなったからです。</p><p>私は物作りが好きで、現場で手を動かすのが性に合っていると思っています。また、仕事は好きですが、毎日深夜まで働いたり会社の評価を意識して振る舞うことなどは避けたいと思っています。</p><p>一方で正社員として求められる仕事はマネジメント業務にシフトしていきました。また、その会社の社員として期待される振る舞いを求められるようになりました。</p><p>上記のような自分の特性と会社が求めることのギャップがストレスとなり、正社員としてキャリアアップしていくことにモチベーションを感じられなくなってしまいました。</p><h3 id="退職前に準備したこと"><a href="#退職前に準備したこと" class="headerlink" title="退職前に準備したこと"></a>退職前に準備したこと</h3><p>フリーランスとして独立する前に、以下の準備を行いました。</p><ol><li><strong>スキルの棚卸し</strong><ul><li>職務経歴書の作成を通して、自分のスキルの棚卸しを行いました</li></ul></li><li><strong>副業</strong><ul><li>実際に IT 企業と業務委託契約を結び、平日の夜や週末に働いていました</li><li>個人事業主として登録し、青色確定申告の書類を作成していました</li></ul></li><li><strong>案件探しと情報収集</strong><ul><li>フリーランスの案件を扱うエージェントに登録して実際に案件獲得を行いました</li><li>自分の単価やどういった需要があるのかを確認することが目的です</li></ul></li></ol><h3 id="フリーランスになってからのリアル"><a href="#フリーランスになってからのリアル" class="headerlink" title="フリーランスになってからのリアル"></a>フリーランスになってからのリアル</h3><p>まだ 1 ヶ月程度ですが、実際にフリーランスとして活動し始めて、以下のようなことを感じました。</p><h3 id="アップサイド"><a href="#アップサイド" class="headerlink" title="アップサイド"></a>アップサイド</h3><ul><li><strong>時間と場所の自由</strong><ul><li>フルリモート、フルフレックスで働いているため、仕事と生活のバランスがとりやすい</li><li>案件はフルリモート前提の仕事のみに限定することができる</li><li>同じ現場のフリーランスの方は、週4勤務だったり15時30分で退勤するように業務時間を調整していたりと柔軟に働いている</li></ul></li><li><strong>開発に集中できストレスが減る</strong><ul><li>業務範囲が明確なので、本業である開発の仕事に集中することができる</li><li>雑務やマネジメント業務をする必要がないため、余計なストレスが減った</li><li>職場の飲み会に参加しなくてよい</li></ul></li><li><strong>環境を自分で選ぶことができる</strong><ul><li>勢いのあるスタートアップの案件に携われば、事業の成長を感じることができる</li><li>携わりたい事業があればその企業にアプローチすることができる</li><li>自分に合わないと感じるところからは撤退する判断ができる</li></ul></li></ul><h3 id="ダウンサイド"><a href="#ダウンサイド" class="headerlink" title="ダウンサイド"></a>ダウンサイド</h3><ul><li><strong>雇用と収入の不安定さ</strong><ul><li>会社員のように毎月決まった給料が入ることが確約されていない</li><li>常に契約解除のリスクがある</li><li>有給休暇がないので休んだ分だけ収入が減る</li></ul></li><li><strong>社会保障が脆弱</strong><ul><li>フリーランスは将来受け取れる年金額が少ない</li><li>病気になったり働けなくなったりした時の収入の保証がない</li></ul></li></ul><p><em>ダウンサイドについては、リスク対策が可能です。しかし、こういったリスク対策についても全て自分自身で行う必要があります。</em></p><h3 id="フリーランスの実態と心境"><a href="#フリーランスの実態と心境" class="headerlink" title="フリーランスの実態と心境"></a>フリーランスの実態と心境</h3><p>私の場合は正社員の頃とあまり働き方は変わっていません。平日の 8 時間は仕事、コミュニケーションは毎日発生しますし、仕事の内容や質も正社員に求められるものと変わりません。</p><p>しかし、契約形態としては独立しているので、自分自身のアイデンティティを大事にできる点が精神的なメリットになっている感じています。</p><p>その分、不安定さはありますが、常に安泰ではないという危機感が自分にとってよい刺激になっています。</p><p>これからフリーランスを続けていくと、様々なトラブルに遭遇すると思います。それも勉強だと思って邁進していく所存です。</p><h3 id="これからフリーランスを目指す人へのアドバイス"><a href="#これからフリーランスを目指す人へのアドバイス" class="headerlink" title="これからフリーランスを目指す人へのアドバイス"></a>これからフリーランスを目指す人へのアドバイス</h3><p>最後に私の経験から、フリーランスを目指す人に伝えたいことは以下の 3 つです。</p><ol><li><strong>準備と情報収集をする</strong><ul><li>いきなりフリーランスになることは不安も多いと思います。そういった場合は、副業から始めてみることをおすすめします</li><li>現在は副業案件が多いそうです。私もエージェントから副業案件についての提案をよく受けます</li><li>副業をすると確定申告が必要になるため、経理の知識もつきます。青色確定申告書類を作成できるようになりましょう。節税になります</li></ul></li><li><strong>自分の強みの把握とスキルの研鑽</strong><ul><li>自分の強みを明確にするために職務経歴書を作成することをおすすめします</li><li>職務経歴書のアピールになるような経験を積めるように、日頃から意識してスキルの研鑽に励みましょう</li></ul></li><li><strong>家族の理解が大事</strong><ul><li>家族がいる人は家族の理解が必要です。収入が安定している正社員から収入が確約されていないフリーランスに転向することは心理的な障壁が高いからです</li><li>いきなり説得することが難しい場合は、時間をかけて理解してもらうことが必要です。私は 3 年ほど時間がかかりました</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;自己紹介とメルカリでの経験&quot;&gt;&lt;a href=&quot;#自己紹介とメルカリでの経験&quot; class=&quot;headerlink&quot; title=&quot;自己紹介とメルカリでの経験&quot;&gt;&lt;/a&gt;自己紹介とメルカリでの経験&lt;/h3&gt;&lt;p&gt;私は 16 年ほど IT 企業でエンジニアとして働い
      
    
    </summary>
    
    
    
      <category term="フリーランス" scheme="https://48n.jp/tags/%E3%83%95%E3%83%AA%E3%83%BC%E3%83%A9%E3%83%B3%E3%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>エンジニアを目指す人が最初にすべきこと、するべきでないこと</title>
    <link href="https://48n.jp/blog/2021/08/31/how-to-get-started-learning-programming/"/>
    <id>https://48n.jp/blog/2021/08/31/how-to-get-started-learning-programming/</id>
    <published>2021-08-31T04:00:00.000Z</published>
    <updated>2021-08-31T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p class="top-message">近年、エンジニアを目指す人が増えてきています。今までパソコンを触ってきていない人もエンジニアを目指し始めており、史上空前のエンジニアブームといってもよいでしょう。この記事では、これからエンジニアを目指す人向けに<strong>何をすべきか、何をすべきでないか</strong>を説明していきたいと思います。</p><h2 id="エンジニアを目指す人が増えている背景"><a href="#エンジニアを目指す人が増えている背景" class="headerlink" title="エンジニアを目指す人が増えている背景"></a>エンジニアを目指す人が増えている背景</h2><p>近年、エンジニア需要の増加 <a href="#ref1">*1</a> でエンジニア（システムエンジニア、プログラマーのこと）を目指す人が増えてきています。文系の大学生、主婦、営業部で働いているサラリーマンなど、今までパソコンに触れてきていない人もエンジニアに興味を持ち目指している、といった状況です。</p><p>そのような状況はTwitterの「<a href="https://twitter.com/search?q=%23%E9%A7%86%E3%81%91%E5%87%BA%E3%81%97%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%8B%E3%82%A2%E3%81%A8%E3%81%A4%E3%81%AA%E3%81%8C%E3%82%8A%E3%81%9F%E3%81%84&src=typed_query" target="_blank">#駆け出しエンジニアとつながりたい</a>」のようなタグからも垣間見ることができます。</p><p>また、SNSの発展に伴いインフルエンサーの影響も年々大きくなってきています。一部のインフルエンサーが発信する、好きな時に好きな場所で働く自由な働き方<a href="#ref2">*2</a>、高収入（フリーランスで年収1000万円）<a href="#ref3">＊3</a>などのキラキラしたイメージがエンジニア人気にさらに拍車をかけています。</p><div class="memo" style="margin-bottom: 40px;">プログラミングについては興味がないが、働き方や高収入に魅力を感じている人が多い印象です。</div><h2 id="穴の空いたバケツに水を注ぐな"><a href="#穴の空いたバケツに水を注ぐな" class="headerlink" title="穴の空いたバケツに水を注ぐな"></a>穴の空いたバケツに水を注ぐな</h2><p>これからエンジニアを目指す人へのアドバイスは「<strong>穴の空いたバケツに水を注ぐな</strong>」です。</p><p>プログラミングの学習を始めた人の話しを聞いてみると、インフルエンサーが発信している自由な働き方、高収入に魅力を感じ、フリーランスを目指してプログラミングの学習を始める方が多い印象です。</p><p>学習を始めることは大変素晴らしいことなのですが、プログラミングに関する学習をしてきていない人たちの多くはパソコンの操作がままなりませんので、ファイルを作成したり、画像をダウンロードしたりといった、パソコンに慣れている人だったら難なく行える操作ができません。</p><p>私はこのようなパソコンの操作がままならない状態を<strong>穴の空いたバケツ状態</strong>と呼んでいます。穴の空いたバケツにいくら水を入れても何も残らないように、この状態でいろいろと教えても多くの知識は定着しません。</p><p>残念ながらこの状態で高額な教材を購入したり、高額な学費を払ってプログラミングスクールに通っている人がいます。しかし、この投資は割りに合わない可能性が高いです。</p><div class="memo" style="margin-bottom: 40px;">穴の空いたバケツに多額の資金を投資することは避けましょう。</div><img src="/images/child-392971_640.jpg" alt="穴の空いたバケツ"><p style="color: gray;">穴の空いたバケツに水を入れてもほとんどが流れていってしまう</p><h2 id="エンジニアを目指す人が最初にすべきこと"><a href="#エンジニアを目指す人が最初にすべきこと" class="headerlink" title="エンジニアを目指す人が最初にすべきこと"></a>エンジニアを目指す人が最初にすべきこと</h2><p>エンジニアを目指す人が最初にすべきことは、<strong>穴の空いたバケツをふさぐこと</strong>です。</p><p>まずは次の２点をおさえます。</p><ul><li><strong>学習する下地をつくること</strong></li><li><strong>プログラミングが自分にあっているかを確認すること</strong></li></ul><div class="memo">この２つが整うまではお金をかけてはいけません。無駄な投資になってしまうリスクがあるからです。</div><h3 id="学習する下地をつくる"><a href="#学習する下地をつくる" class="headerlink" title="学習する下地をつくる"></a>学習する下地をつくる</h3><p>どうやって学習する下地をつくるかですが、<strong>HTML/CSSの学習</strong>からはじめましょう。</p><p>最初からPHPなどのプログラミング言語を学習した方が効率がいいというインフルエンサーもいますが<a href="#ref4">*4</a>、パソコンに慣れていない人はプログラミング言語をインストールしたり、実行したりすることが難しいので、そこで詰みます。</p><p>また、ターミナルやブラウザーに表示されているプログラムの実行結果をみて、楽しいと感じる人はあまりいないでしょう。それよりも、華やかなHTML/CSSの画面をみる方がやりがいを感じられるものです。</p><div class="memo">パソコンの操作に慣れていない人はHTML/CSSから始めましょう。具体的な方法については、別の記事で説明したいと思います。</div><h3 id="プログラミングが自分にあっているのかを確認する"><a href="#プログラミングが自分にあっているのかを確認する" class="headerlink" title="プログラミングが自分にあっているのかを確認する"></a>プログラミングが自分にあっているのかを確認する</h3><p>最初の段階で必要なのは、パソコンの操作に慣れつつ<strong>プログラミングが自分にあっているのかを確認する</strong>ことです。特に<strong>プログラミングの学習が楽しい</strong>と感じられるかどうかが重要です。</p><p>高額な費用を払った後にプログラミングは自分にはあっていなかったと知る人もいます。自分にあっているかどうかは数十万円の学費を払わずとも、<strong>数千円の入門書を買って１カ月くらい学習をやってみればわかります</strong>。</p><div class="memo">プログラミング学習を楽しいと感じることができればOKです。</div><h2 id="参考リンク"><a href="#参考リンク" class="headerlink" title="参考リンク"></a>参考リンク</h2><ol><li id="ref1">    <a href="https://www.meti.go.jp/policy/it_policy/jinzai/houkokusyo.pdf" target="_blank">IT 人材需給に関する調査</a></li><li id="ref2">    <a href="https://www.youtube.com/watch?v=qt25fhF7fLo" target="_blank">【月収８００万】海外フリーランスの１日ルーティン【マレーシア】</a></li><li id="ref3">    <a href="https://www.youtube.com/watch?v=LoXe8iFAsVs" target="_blank">WEBフリーランスで年収1000万円超えないのはどう考えてもおかしい</a></li><li id="ref4">    <a href="https://www.youtube.com/watch?v=zfe-RkpShAg" target="_blank">【プログラミング初心者必見】HTML/CSSから勉強し始めてはいけない理由</a></li></ol>]]></content>
    
    <summary type="html">
    
      近年、エンジニアを目指す人が増えてきています。この記事では、これからエンジニアを目指す人向けに何をすべきか、何をすべきでないかを説明していきたいと思います。
    
    </summary>
    
    
    
      <category term="プログラミング学習" scheme="https://48n.jp/tags/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E5%AD%A6%E7%BF%92/"/>
    
  </entry>
  
  <entry>
    <title>ブログシステムをHexoにしました</title>
    <link href="https://48n.jp/blog/2019/10/31/replace-blog-system/"/>
    <id>https://48n.jp/blog/2019/10/31/replace-blog-system/</id>
    <published>2019-10-31T09:30:30.000Z</published>
    <updated>2019-10-31T09:30:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>ブログシステムを<a href="https://hexo.io/" target="_blank" class="outbound">Hexo</a>にしました。ブログデザインも新規で作成しました。ブログシステムはそのうちリプレースしたいなと常々思っていたのですが、なかなかこれといったものがなく時間が経ってしまいましたが、ついにリプレースすることができました。</p><h2 id="以前のブログシステム"><a href="#以前のブログシステム" class="headerlink" title="以前のブログシステム"></a>以前のブログシステム</h2><p>以前のブログシステムはOctopressを使っていました。このOctopress、いくつか問題点がありました。</p><h3 id="動作が遅い"><a href="#動作が遅い" class="headerlink" title="動作が遅い"></a>動作が遅い</h3><p>Markdownで書いてそれをhtmlに変換する仕組みなのですが、その速度が遅いです。<br>記事数が少ない場合はそれほど気にならなかったのですが、100記事くらいになってくると明らかに遅くなってきます。<br>現在では、プレビューモードで変換するのに10秒程度かかってしまい、気持ちよく記事が書けない状態でした。</p><h3 id="メンテナンスされていない"><a href="#メンテナンスされていない" class="headerlink" title="メンテナンスされていない"></a>メンテナンスされていない</h3><p>2015年で開発が止まっています。新機能や改善もないですし、機能に問題がある場合も修正がされません。開発が止まっているものは使うべきではありません。今から使うのはやめたほうがいいでしょう。</p><h2 id="なぜHexoにしたのか"><a href="#なぜHexoにしたのか" class="headerlink" title="なぜHexoにしたのか"></a>なぜHexoにしたのか</h2><h3 id="Node-jsで書かれているから"><a href="#Node-jsで書かれているから" class="headerlink" title="Node.jsで書かれているから"></a>Node.jsで書かれているから</h3><p>HexoはNode.jsで書かれています。<br>最近はNode.jsを使うことが多いので、Node.jsで書かれているブログシステムを使いたかったのです。</p><h3 id="静的サイトジェネレーターだから"><a href="#静的サイトジェネレーターだから" class="headerlink" title="静的サイトジェネレーターだから"></a>静的サイトジェネレーターだから</h3><p>ブログシステムには大きく分けて静的サイトジェネレーターとデータベースを使ったブログシステムがあります。Hexoは静的サイトジェネレーターと言われるシステムです。静的サイトジェネレーターはMarkdown等の形式で書かれたファイルをhtmlに変換するソフトウェアです。</p><p>静的サイトジェネレーターのメリットは表示速度が早い、セキュリティリスクがほとんどない、他のシステムに移行しやすいなどのメリットがあります。個人ブログであれば静的サイトジェネレーターがおすすめです。</p><h3 id="人気のあるブログシステムだから"><a href="#人気のあるブログシステムだから" class="headerlink" title="人気のあるブログシステムだから"></a>人気のあるブログシステムだから</h3><p>Node.jsで書かれていて人気のあるブログシステムはHexoとGatsby、あとは最近VuePressも人気が出てきているようです。<br>他にどんなソフトウェアがあるかはこちらで確認することができます。</p><ul><li><a href="https://github.com/topics/static-site-generator" target="_blank" class="outbound">static-site-generator · GitHub Topics</a></li></ul><p>人気のあるソフトウェアは開発が活発で便利な機能も多く、使いやすいことが多いです。</p><h3 id="現在も開発が行われているから"><a href="#現在も開発が行われているから" class="headerlink" title="現在も開発が行われているから"></a>現在も開発が行われているから</h3><p>Hexoは現在も開発が行われています。2019-10-14にバージョン4.0のリリースが行われました。</p><ul><li><a href="https://hexo.io/news/2019/10/14/hexo-4-released/" target="_blank" class="outbound">Hexo 4.0.0 Released | Hexo</a></li></ul><h2 id="Hexo-vs-Gatsby-vs-VuePress"><a href="#Hexo-vs-Gatsby-vs-VuePress" class="headerlink" title="Hexo vs Gatsby vs VuePress"></a>Hexo vs Gatsby vs VuePress</h2><p>Node.js環境の静的サイトジェネレーターはHexo、Gatsby、VuePressの3つが人気です。GatsbyとVuePressは次の理由で採用しませんでした。</p><h3 id="Gatsbyを採用しなかった理由"><a href="#Gatsbyを採用しなかった理由" class="headerlink" title="Gatsbyを採用しなかった理由"></a>Gatsbyを採用しなかった理由</h3><p><a href="https://www.gatsbyjs.org/" target="_blank" class="outbound">Gatsby</a>はReactベースの静的サイトジェネレーターです。Reactに慣れている人であればいいかもしれませんが、私がReactに詳しくないのもあり、Gatsbyは学習コストが高いという印象です。あえてその学習コストを払ってGatsbyを使うメリットが見当たらないので採用を見送りました。</p><h3 id="VuePressを採用しなかった理由"><a href="#VuePressを採用しなかった理由" class="headerlink" title="VuePressを採用しなかった理由"></a>VuePressを採用しなかった理由</h3><p><a href="https://vuepress.vuejs.org/" target="_blank" class="outbound">VuePress</a>がメジャーバージョンになったということもあり、VuePressも試してみました。情報が少なくまだまだ使いづらいというのが正直なところで、VuePressを使うメリットが見当たりませんでした。<br>ブログではなく、ドキュメントなどのシステムとして使うならありかもしれません。<br>一応、サンプルコードをGitHubにあげているので興味のある方は参考にしてみてください。</p><ul><li><a href="https://github.com/shoyan/vuepress-sample" target="_blank" class="outbound">vuepress-sample</a></li></ul><h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>特にこだわりがなくブログを楽に構築したいということであれば、Hexo一択ではないかと思います。最後にHexoを使うメリットについて説明します。</p><h2 id="Hexoを使うメリット"><a href="#Hexoを使うメリット" class="headerlink" title="Hexoを使うメリット"></a>Hexoを使うメリット</h2><h3 id="ブログの基本機能が簡単に作成できる"><a href="#ブログの基本機能が簡単に作成できる" class="headerlink" title="ブログの基本機能が簡単に作成できる"></a>ブログの基本機能が簡単に作成できる</h3><p>Hexoでのブログ構築は5つのコマンドを実行するだけです。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p><code>hexo server</code> を実行後に<code>http://localhost:4000</code> にアクセスするとブログが表示されます。</p><h3 id="テーマの作成がしやすい"><a href="#テーマの作成がしやすい" class="headerlink" title="テーマの作成がしやすい"></a>テーマの作成がしやすい</h3><p>Hexoにはテーマ作成をサポートするツールが用意されています。<br><a href="https://www.npmjs.com/package/generator-hexo-theme" target="_blank" class="outbound">generator-hexo-theme</a>を使えば簡単にブログテーマの雛形を用意することができます。<br>ブログテーマは自作したのですが、その雛形はgenerator-hexo-themeで作成しました。</p><h3 id="CI-CDも簡単"><a href="#CI-CDも簡単" class="headerlink" title="CI/CDも簡単"></a>CI/CDも簡単</h3><p>masterにマージしたら自動的にデプロイする設定を入れています。そのあたりも公式のマニュアルが用意してあり、手順にそって設定していくだけでCI/CD環境を作ることができます。私はGitHub Pagesを使っており、サーバー費用0円でブログを運営しています。コストパフォーマンスは最高ですね。</p><ul><li><a href="https://hexo.io/docs/github-pages.html" target="_blank" class="outbound">GitHub Pages | Hexo</a></li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>Hexoは学習コストが低く、テーマ作成もわりと簡単にできるので楽にブログを作りたい人におすすめです。Node.js環境でブログを作りたいときは検討してみてはいかがでしょうか。</p>]]></content>
    
    <summary type="html">
    
      ブログシステムをHexoにしました。Hexoのメリットや他のフレームワークであるGatsubyやVuePressと比較した結果などをまとめました。
    
    </summary>
    
    
    
      <category term="ブログ" scheme="https://48n.jp/tags/%E3%83%96%E3%83%AD%E3%82%B0/"/>
    
      <category term="Hexo" scheme="https://48n.jp/tags/Hexo/"/>
    
      <category term="静的サイトジェネレーター" scheme="https://48n.jp/tags/%E9%9D%99%E7%9A%84%E3%82%B5%E3%82%A4%E3%83%88%E3%82%B8%E3%82%A7%E3%83%8D%E3%83%AC%E3%83%BC%E3%82%BF%E3%83%BC/"/>
    
  </entry>
  
  <entry>
    <title>シンプルに実装する大切さ</title>
    <link href="https://48n.jp/blog/2019/08/19/simple-implementation/"/>
    <id>https://48n.jp/blog/2019/08/19/simple-implementation/</id>
    <published>2019-08-19T03:48:14.000Z</published>
    <updated>2019-08-19T03:48:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>私はシンプルに実装することをとても大切にしています。最も大切にしていると言っても過言ではありません。</p><p>プログラミングの経験が浅い人は、難解なコードを書いたり、短い行数でコードを書けることがかっこいいと考えているかもしれませんが、完全に間違っています。シンプルに実装することは実は難しいのです。プログラムというものは、すぐに複雑になってしまうからです。複雑でかっこいいコードを書こうという考えがそもそもの間違いです。</p><p>この記事を読んでいるみなさんは、今後は簡単でシンプルな必要最小限のコードを書くという意識でコードを書いてください。</p><p>私はNode.jsのコミッターがトラディショナルなfor文を使ったコードを書いていることを見たことがあります。そのコードは、これ以上ないくらいシンプルなコードでした。</p><p>現在のプログラムの多くは、今後も多くの変更が入ります。そうであれば、完璧に動くことよりもメンテナンスがしやすいことが大切です。後々、悪い影響を及ぼすコードは複雑で難解なコードです。シンプルで意図が明快なコードが問題を起こすことはありません。</p><p>一般的な技術を有したエンジニアであれば誰でも理解できるコードを書いてください。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;私はシンプルに実装することをとても大切にしています。最も大切にしていると言っても過言ではありません。&lt;/p&gt;
&lt;p&gt;プログラミングの経験が浅い人は、難解なコードを書いたり、短い行数でコードを書けることがかっこいいと考えているかもしれませんが、完全に間違っています。シンプルに
      
    
    </summary>
    
    
    
      <category term="コラム" scheme="https://48n.jp/tags/%E3%82%B3%E3%83%A9%E3%83%A0/"/>
    
  </entry>
  
  <entry>
    <title>テストカバレッジ100%を目指さない理由</title>
    <link href="https://48n.jp/blog/2019/08/02/why-do-not-i-aim-for-100-test-coverage/"/>
    <id>https://48n.jp/blog/2019/08/02/why-do-not-i-aim-for-100-test-coverage/</id>
    <published>2019-08-02T08:47:20.000Z</published>
    <updated>2019-08-02T08:47:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>テストカバレッジ100%は目指さない</p><h2 id="理由"><a href="#理由" class="headerlink" title="理由"></a>理由</h2><p>以前、このようなツイートをしました。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">マージ条件に作成したコードのテストカバレッジが100%であることというプロジェクトを見たことがあります</p>&mdash; しょーやん (@sinn_shoyan) <a href="https://twitter.com/sinn_shoyan/status/1155279098102472705?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">July 28, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>テストカバレッジ100%に違和感を感じない人はもう少し勉強した方がいいですね。</p><p>テストカバレッジ100%を目指すとこのようになってしまいます。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">テストカバレッジ100%を目指すとどうなるかを説明しましょう。テストの目的がカバレッジを通すことになってしまい、意味のないテストが乱立します</p>&mdash; しょーやん (@sinn_shoyan) <a href="https://twitter.com/sinn_shoyan/status/1155279684218675201?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">July 28, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>さらにテストの問題も発生します。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">さらに、コードとテストコードが密結合になり、コードを少し変えるとテストが落ちるという状態になります。リファクタリングする場合、テストコードも書き直しになります</p>&mdash; しょーやん (@sinn_shoyan) <a href="https://twitter.com/sinn_shoyan/status/1155280247924768772?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">July 28, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>テストカバレッジの問題については次の記事に詳しく書いてあります。</p><ul><li><a herf="https://qiita.com/bremen/items/d02eb38e790b93f44728" target="_blank">テストカバレッジ100%を追求しても品質は高くならない理由と推奨されるカバレッジの目標値について</a></li></ul><p>全てのコードにコメントを書くのは馬鹿げていると感じる人は多いでしょう。全てのコードにテストを書くということも同じように考えるとどうでしょう。何事も過ぎたるは及ばざるが如しです。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;結論&quot;&gt;&lt;a href=&quot;#結論&quot; class=&quot;headerlink&quot; title=&quot;結論&quot;&gt;&lt;/a&gt;結論&lt;/h2&gt;&lt;p&gt;テストカバレッジ100%は目指さない&lt;/p&gt;
&lt;h2 id=&quot;理由&quot;&gt;&lt;a href=&quot;#理由&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
    
      <category term="ソフトウェア開発" scheme="https://48n.jp/tags/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA/"/>
    
  </entry>
  
  <entry>
    <title>データベース固有の関数の使用を避けるべき理由</title>
    <link href="https://48n.jp/blog/2019/04/25/avoid-using-database-specific-functions/"/>
    <id>https://48n.jp/blog/2019/04/25/avoid-using-database-specific-functions/</id>
    <published>2019-04-25T07:21:18.000Z</published>
    <updated>2019-04-25T07:21:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>こんにちは、しょーやんです。</p><p>私はエンジニアとして12年目で、現在はエンジニアチームのリーダーとしてWebアプリケーションのシステムを開発しています。キャリアとしては、SIerで1年、ベンチャー企業で3年、300人程度の企業で5年、現在は6000人規模の会社でエンジニアとして働いています。</p><p>前提として、ここで話すことはアプリケーション設計に関する話しです。データベースの関数自体の使用を否定しているわけではありません。データベース固有の関数を使う前に少し考えてみましょうという話しです。まずは、データベース固有の関数を使うリスクについて説明します。</p><h2 id="データベース固有の関数を使うリスク"><a href="#データベース固有の関数を使うリスク" class="headerlink" title="データベース固有の関数を使うリスク"></a>データベース固有の関数を使うリスク</h2><p>データベースには固有の関数が用意されています。MySQLだとDATE_FORMATやNOW、SUMといったような関数です。これらを利用するのは便利ですが、安易な利用はおすすめしません。相応の理由がない限りは避けるべきです。理由は、データベース固有の関数を利用すると移植性が失われてしまうからです。</p><p>多くの人はデータベースを変更することはほとんどないだろうと考えます。本当にそうでしょうか。</p><p>例えば、開発環境ではSQLite、プロダクション環境ではMySQLを使うということは特段珍しいことではありません。<br>トランザクション境界を分離できないようなインテグレーションテストを実行するときはどうでしょうか。</p><p>ユーザーの情報を取得するAPIのインテグレーションテストがあるとします。このテストをクリアするためには、事前にユーザーのデータをデータベースに登録しておくことが必要です。そうでなければユーザーのデータを検証することができません。<br>テスト用のデータベースを共有で利用していた場合、一時的に作成されたテストデータが他のテストに影響するようになるでしょう。この問題は複数のテストが同時に実行されるようなCI環境になると顕著に現れます。解決策の1つとしてプロダクション環境と同じデータベースが含まれたイメージを作成するという手がありますが、複雑なイメージファイルを作成することは、なるべくなら避けたいところです。</p><h2 id="データベースはドアノブである"><a href="#データベースはドアノブである" class="headerlink" title="データベースはドアノブである"></a>データベースはドアノブである</h2><p>ロバート・C・マーティンは著書「Clean Architecture」で、データベースはあくまで道具の1つであり、アーキテクチャの中心になるものではないと言っています。データベースは家のドアノブのようなものであり、アーキテクチャ的にはどうでもよいのです。ドアノブに家の設計を合わせることはしないでしょう。データベースがドアノブのようなものであれば、データベースに依存しないようにアプリケーションを実装するのは当然のことのように思えます。</p><p>RailsやSpringのような現在のフレームワークは、データベースを抽象化して扱えるような仕組みを提供しています。多くの場合、それはORMとして提供されており、利用するドライバーの設定を変更するだけでデータベースを変更することが可能です。</p><p>アプリケーション設計の側面から考えると、データベース固有の関数は避けるべきです。データベース固有の関数を利用する必要が場合は、基本的なCRUDで同じことができないかを検討しましょう。さもなければ、たった1つのデータベース固有の関数のせいでアプリケーションの移植性は失われてしまいます。</p><h2 id="原則としてアプリケーション側で対応する"><a href="#原則としてアプリケーション側で対応する" class="headerlink" title="原則としてアプリケーション側で対応する"></a>原則としてアプリケーション側で対応する</h2><p>多くのアプリケーションは基本的なCRUDで構築することが可能です。少しの手間を省くためにデータベース固有の関数（例えばMySQLのREPLACE）を利用することはデメリットの方が大きくなる可能性があります。よく見られるアンチパターンはNOWの多様です。時刻はアプリケーション側で取得できます。アプリケーション側で対応できるものはアプリケーションの機能で対応しましょう。</p><h2 id="データベース固有の機能に頼った方がいい場合"><a href="#データベース固有の機能に頼った方がいい場合" class="headerlink" title="データベース固有の機能に頼った方がいい場合"></a>データベース固有の機能に頼った方がいい場合</h2><p>データベース固有の機能に頼った方がいい場合も存在します。例えば、位置情報を扱うような場合です。位置情報を扱う場合、PostgreSQLの拡張であるPostGISを利用した方が少ない労力で実装することができるでしょう。このように明確なアドバンテージがある場合はデータベース固有の機能を利用しない理由はありません。</p><iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=syoyama-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=4048930656&linkId=bd16a1851920993a41c2031b32cd6769"></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;こんにちは、しょーやんです。&lt;/p&gt;
&lt;p&gt;私はエンジニアとして12年目で、現在はエンジニアチームのリーダーとしてWebアプリケーションのシステムを開発しています。キャリアとしては、SIerで1年、ベンチャー企業で3年、300人程度の企業で5年、現在は6000人規模の会社で
      
    
    </summary>
    
    
    
      <category term="ソフトウェアアーキテクチャ" scheme="https://48n.jp/tags/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3/"/>
    
  </entry>
  
  <entry>
    <title>手軽にスプラトゥーンをYouTubeで配信する</title>
    <link href="https://48n.jp/blog/2018/12/07/upload-youtube/"/>
    <id>https://48n.jp/blog/2018/12/07/upload-youtube/</id>
    <published>2018-12-07T07:47:03.000Z</published>
    <updated>2018-12-07T07:47:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>私はYouTubeやOPENREC.tvでよくスプラトゥーンの配信を視聴しているのですが、みているだけでなく自分もやってみたいと思ったのでYouTubeで配信をはじめてみました。この記事では、YouTubeでゲーム動画を配信する方法を紹介します。</p><h2 id="配信の手順"><a href="#配信の手順" class="headerlink" title="配信の手順"></a>配信の手順</h2><p>配信の手順としては次の通りです。</p><ol><li>キャプチャボードを使ってゲームの動画と音声を外付けの記録媒体に保存</li><li>記録媒体に保存した動画をPCの編集ソフトを使って編集する（アフレコをしたり、不要な部分をカットしたり、音量の調整をする）</li><li>編集した動画をYouTubeにアップロードする</li></ol><h2 id="配信に必要な機材"><a href="#配信に必要な機材" class="headerlink" title="配信に必要な機材"></a>配信に必要な機材</h2><ul><li>キャプチャボード<ul><li>ゲームの動画と音声をキャプチャするのに必要です</li></ul></li><li>記録媒体<ul><li>USBメモリや外付けHDDなど。PCに保存する場合は不要です</li></ul></li><li>PC<ul><li>動画の編集に必要です。私はMacBook Air(メモリは4GB)を使っています</li></ul></li><li>マイク<ul><li>実況を録音するためのマイクです</li></ul></li></ul><h2 id="キャプチャボードを用意する"><a href="#キャプチャボードを用意する" class="headerlink" title="キャプチャボードを用意する"></a>キャプチャボードを用意する</h2><p>ゲームの動画と音声を録画するにはキャプチャボードが必要です。キャプチャボードには様々な種類があり、どれを使ったらいいのかよくわからなくなると思います（私がそうでした）。私のおすすめのキャプチャボードは<a href="https://amzn.to/2rnVxeD" target="_blank">I-O DATA HDMI キャプチャーボード GV-HDREC</a>です。</p><iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=syoyama-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=B01NBKP6GC&linkId=01b8e2236f4d964da8d3765408052cde"></iframe><p>このキャプチャボードは1万円程度と手頃な値段で操作方法も簡単です。最初の1台としておすすめできます。ただし、PCとの接続はできないので、リアルタイム配信には使えません。</p><h2 id="記録媒体を用意する"><a href="#記録媒体を用意する" class="headerlink" title="記録媒体を用意する"></a>記録媒体を用意する</h2><p>私は32GBのUSBメモリを使っています。スマートフォンに接続できるタイプがおすすめです。録画した動画をスマートフォンで観たり、不要な動画を削除したりできます。</p><iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=syoyama-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=B07GNZ2RYG&linkId=23d57073d72c0301fc32418069273158"></iframe><p>32GBで2時間程度の録画ができます（記録形式によって時間は変わります）。32GBだとこまめにデータを消す必要があるので、もう少し大きな容量がよいかもしれません。</p><h2 id="動画の編集"><a href="#動画の編集" class="headerlink" title="動画の編集"></a>動画の編集</h2><p>画像の編集はiMovieを使っています。簡単な編集であればiMovieで十分です。YouTubeへのアップロード機能もついており、この機能を使ってYouTubeにアップロードしています。iMovieの操作方法についてはドキュメントをご覧ください。</p><ul><li><a href="https://help.apple.com/imovie/mac/10.1/?lang=ja" target="_blank" rel="noopener">iMovieヘルプ</a></li></ul><p>アフレコに使うマイクはアップルの純正イヤホンのマイクを使ってます。</p><h2 id="おわりに"><a href="#おわりに" class="headerlink" title="おわりに"></a>おわりに</h2><p>このような感じで、特に難しいことをせずに動画配信ができてしまいます。今後もスプラトゥーンの動画を配信していくので、ぜひチャンネル登録お願いします！</p><iframe width="560" height="315" src="https://www.youtube.com/embed/MefVKKI8l-4" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;私はYouTubeやOPENREC.tvでよくスプラトゥーンの配信を視聴しているのですが、みているだけでなく自分もやってみたいと思ったのでYouTubeで配信をはじめてみました。この記事では、YouTubeでゲーム動画を配信する方法を紹介します。&lt;/p&gt;
&lt;h2 id=&quot;配
      
    
    </summary>
    
    
    
      <category term="スプラトゥーン2" scheme="https://48n.jp/tags/%E3%82%B9%E3%83%97%E3%83%A9%E3%83%88%E3%82%A5%E3%83%BC%E3%83%B32/"/>
    
  </entry>
  
  <entry>
    <title>シェルスクリプトで別プロセスの終了ステータスを取得する</title>
    <link href="https://48n.jp/blog/2018/11/29/check-other-process/"/>
    <id>https://48n.jp/blog/2018/11/29/check-other-process/</id>
    <published>2018-11-29T05:55:51.000Z</published>
    <updated>2018-11-29T05:55:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>シェルスクリプトで別プロセスの終了ステータスを取得するTipを紹介します。</p><h3 id="ユースケース"><a href="#ユースケース" class="headerlink" title="ユースケース"></a>ユースケース</h3><p>時間のかかる処理などを並列で行い、その実行結果(終了ステータス)を取得したい。</p><h3 id="サンプルコード"><a href="#サンプルコード" class="headerlink" title="サンプルコード"></a>サンプルコード</h3><p>Bashのサンプルコードです。スクリプトに解説を記入しています。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">command1</span></span>() &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"executing commnad1"</span></span><br><span class="line">  sleep 3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">command2</span></span>() &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"executing commnad2"</span></span><br><span class="line">  sleep 3</span><br><span class="line">  <span class="comment"># エラーとして終了させる</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"start"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># バックグラウンドで実行</span></span><br><span class="line">command1 &amp;</span><br><span class="line"><span class="comment"># $!で直前に実行されたコマンドのプロセスIDを取得し、変数に保存している</span></span><br><span class="line">pid1=$!</span><br><span class="line"></span><br><span class="line">command2 &amp;</span><br><span class="line">pid2=$!</span><br><span class="line"></span><br><span class="line"><span class="comment"># waitは指定されたプロセスIDの処理が終わるまで待つ</span></span><br><span class="line"><span class="built_in">wait</span> <span class="variable">$pid1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># $?でwaitで指定しているプロセスの終了ステータスを取得することができる</span></span><br><span class="line"><span class="keyword">if</span> [ $? != 0 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"command1 error"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"commnad1 success"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">wait</span> <span class="variable">$pid2</span></span><br><span class="line"><span class="keyword">if</span> [ $? != 0 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"command2 error"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"command2 success"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"end"</span></span><br></pre></td></tr></table></figure><p>gistにもコードをアップしています。</p><ul><li><a href="https://gist.github.com/shoyan/6f45b6a005fd34a44264fa1dcb4d56e6" target="_blank">wait_process.sh</a></li></ul><p>shellの学習は次の書籍を1冊やっておけば大丈夫です。</p><iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=syoyama-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=4797321946&linkId=98e93361f2c0071d8749d5526b9a8b64"></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;シェルスクリプトで別プロセスの終了ステータスを取得するTipを紹介します。&lt;/p&gt;
&lt;h3 id=&quot;ユースケース&quot;&gt;&lt;a href=&quot;#ユースケース&quot; class=&quot;headerlink&quot; title=&quot;ユースケース&quot;&gt;&lt;/a&gt;ユースケース&lt;/h3&gt;&lt;p&gt;時間のかかる処理な
      
    
    </summary>
    
    
    
      <category term="Linux" scheme="https://48n.jp/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>RubyでのWebアプリケーション開発はSinatraから入りRailsに行く</title>
    <link href="https://48n.jp/blog/2018/11/20/sinatra-way/"/>
    <id>https://48n.jp/blog/2018/11/20/sinatra-way/</id>
    <published>2018-11-20T07:04:35.000Z</published>
    <updated>2018-11-20T07:04:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>私はソフトウェアエンジニアなのですが、プログラミング講師としても生徒さんにRubyを教えています。RubyでWebアプリケーションを作る場合、まず候補になるフレームワークはRuby on Railsですが、Railsは初学者には難しいと思います。プログラミング初学者にRailsを教えるということは、車の教習所でいきなりスポーツカーを運転させるようなものです。入門者には入門者に適した車があるのと同様にプログラミングにもそのようなものがあります。</p><p>では、最初は何がいいかというと、Sinatraがよいと思います。そういうわけで、Sinatraを使ったWebアプリケーションのサンプルを探してみたのですが、よいものが見つかりませんでした。ないなら作ってしまえというわけで作りました。</p><ul><li><a href="https://github.com/shoyan/sinatra-app" target="_blank">https://github.com/shoyan/sinatra-app</a></li></ul><p>今回作成したのはシンプルなメモアプリケーションでフォームに入力した値をメモとして保存することができます。作成したメモの一覧表示、詳細表示、編集機能、削除機能を実装しています。基本的なCRUD操作を備えており、RESTについても学ぶことができるようになっています。</p><p>わかりやすいようにディレクトリをわけています。initialディレクトリは最初からフルスクラッチで作る場合のディレクトリです。step1はメモの作成とメモの表示機能を実装しています。step2はstep1の機能にメモの削除とメモの編集機能を追加しています。</p><p>実装にあたっては、できるだけRubyの標準ライブラリを使うようにしました。理由は長い年月において最も安定的に使えるのはRubyの標準ライブラリであることからです。サードパーティのライブラリは便利ですが、Rubyのバージョンアップによる互換性の問題などを含んでいます。将来的にも安定して動作させることを考慮すると標準ライブラリで実現できる機能であれば標準ライブラリを選択するのは良い選択肢だと思います。</p><p>また、データベース（正確にはRDBMS）はややこしいので使っていません。もう少し丁寧に説明すると、今回のアプリケーションはプログラミング初学者の学習に適しているアプリケーションをシンプルな実装（環境も含めて）で作るということを目的として作ったので、その点でRDBMSは適していません。では、どうやってメモを永続的に保持するのかというと、ファイルとして保持しています。この機能の実装には、Rubyの標準ライブラリであるpstoreを利用しました。pstoreとはオブジェクトをそのままファイルとして保存するライブラリです。メモアプリケーションの機能を実現するなら、これで十分なわけです。</p><ul><li><a href="https://docs.ruby-lang.org/ja/latest/library/pstore.html" target="_blank">https://docs.ruby-lang.org/ja/latest/library/pstore.html</a></li></ul><p>Webアプリケーションはリクエストとパラメーター（必要であれば）をアプリケーションサーバーに送信し、ルーティング設定に従ってそのリクエストを処理します。そして、レスポンスを返します。この流れを理解することがはじめの1歩です。この流れが理解できていない状態でRailsを使うのは早すぎるように思いますし、データベースの用意やらマイグレーションやらは確実に最初の壁となってプログラミング初学者に立ちはだかるでしょう。</p><p>そのようなややこしいことは置いておいて、まずは小さな動くアプリケーションを作りましょう。Sinatraであればターミナルに数コマンドを打つだけでアプリケーションを起動できます。自分で全てのコードを書いても数時間程度で書くことができます。コードのほとんどは標準のRubyのライブラリを使用しているため、とてもシンプルです。</p><p>ここまではRailsについて散々けなしていますが、誤解のないように断っておくと、本格的なWebアプリケーションを作るのであればRailsがいいです。習得に数ヶ月はかかるでしょうが、多くの機能を少ないコードで実装できてしまうRailsの生産性の高さは、それだけの時間をかける価値があります。しかし、プログラミング初学者がいきなりRailsから入るのは難しいのではと思います。RubyでのWebアプリケーション開発は、まずはSinatraから入りそこからRailsに行くのがよいというのが私の考えです。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;私はソフトウェアエンジニアなのですが、プログラミング講師としても生徒さんにRubyを教えています。RubyでWebアプリケーションを作る場合、まず候補になるフレームワークはRuby on Railsですが、Railsは初学者には難しいと思います。プログラミング初学者にRai
      
    
    </summary>
    
    
    
      <category term="Ruby" scheme="https://48n.jp/tags/Ruby/"/>
    
      <category term="Sinatra" scheme="https://48n.jp/tags/Sinatra/"/>
    
  </entry>
  
  <entry>
    <title>Developers Summit 2018 FUKUOKAに登壇します</title>
    <link href="https://48n.jp/blog/2018/09/05/before-developers-summit-2018-fukuoka/"/>
    <id>https://48n.jp/blog/2018/09/05/before-developers-summit-2018-fukuoka/</id>
    <published>2018-09-05T10:40:36.000Z</published>
    <updated>2018-09-05T10:40:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>2018年9月7日にアクロス福岡で開催される <a href="https://event.shoeisha.jp/devsumi/20180906" target="_blank">Developers Summit 2018 FUKUOKA</a>(デブサミ福岡)に登壇します。<br>明日はどのような話しから入ろうかがまだ決まっていなくて、どうしようかと考えています。</p><p>発表内容は0からはじまった開発チームが、どのようにチームとしてまとまっていき、アプリケーション開発を成功させることができたかという事例の紹介となります。</p><ul><li><a href="https://event.shoeisha.jp/devsumi/20180906/session/1775/" target="_blank">Y!Jカード天神チームの立ち上げからこれまで</a></li></ul><p>デブサミ福岡のような大きなイベントに登壇するのは今回が初めてなので、うまくできるか不安ではありますが、精一杯やりたいと思っています。もし、当日会場に来られる方がいれば是非、お声がけください。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2018年9月7日にアクロス福岡で開催される &lt;a href=&quot;https://event.shoeisha.jp/devsumi/20180906&quot; target=&quot;_blank&quot;&gt;Developers Summit 2018 FUKUOKA&lt;/a&gt;(デブサミ福岡)に登壇
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>最短でビデオチャットを開発したい人へ</title>
    <link href="https://48n.jp/blog/2018/08/07/started-video-chat/"/>
    <id>https://48n.jp/blog/2018/08/07/started-video-chat/</id>
    <published>2018-08-07T05:23:15.000Z</published>
    <updated>2018-08-07T05:23:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>ビデオチャットを最短で作りたいと考えている人への備忘録です。次の手順に沿って開発すると4時間程度でビデオチャットを開発できます。</p><ol><li><a href="#1-webrtcの概要を把握する">WebRTCの概要を把握する</a></li><li><a href="#2-webrtcのコードを動かしてみる">WebRTCのコードを動かしてみる</a></li><li><a href="#3-webrtcの開発を支援するサービスを利用する">WebRTCの開発を支援するサービスを利用する</a></li></ol><h2 id="1-WebRTCの概要を把握する"><a href="#1-WebRTCの概要を把握する" class="headerlink" title="1. WebRTCの概要を把握する"></a>1. WebRTCの概要を把握する</h2><p>まずはWebRTCについての概要を把握しておくと、実装するときの理解が深まります。まずは、次の記事を読んでください。</p><ul><li><a href="https://gist.github.com/voluntas/67e5a26915751226fdcf" target="_blank">WebRTC コトハジメ</a></li></ul><p>同じタイトルですが、Qiitaのこの記事もわかりやすいです。</p><ul><li><a href="https://qiita.com/yusuke84/items/286f569d110daede721e" target="_blank">WebRTC コトハジメ</a></li></ul><h2 id="2-WebRTCのコードを動かしてみる"><a href="#2-WebRTCのコードを動かしてみる" class="headerlink" title="2. WebRTCのコードを動かしてみる"></a>2. WebRTCのコードを動かしてみる</h2><p>上記の記事を読んだら、早速コードを動かしてみましょう。コードを実際に動かしてみることで、着実にWebRTCの概念を理解していくことができます。</p><p>次の記事で簡単にPCのカメラの映像をブラウザに表示できることが体感してください。</p><ul><li><a href="https://html5experts.jp/mganeko/19728/" target="_blank">カメラを使ってみよう ーWebRTC入門2016</a></li></ul><p>次の記事でシグナリングの流れを掴みましょう。</p><ul><li><a href="https://html5experts.jp/mganeko/19814/" target="_blank">手動でWebRTCの通信をつなげよう ーWebRTC入門2016</a></li></ul><h2 id="3-WebRTCの開発を支援するサービスを利用する"><a href="#3-WebRTCの開発を支援するサービスを利用する" class="headerlink" title="3. WebRTCの開発を支援するサービスを利用する"></a>3. WebRTCの開発を支援するサービスを利用する</h2><p>本格的なビデオチャットを開発するのはなかなか大変です。その開発を楽にしてくれるサービスが世の中に存在します。私がおすすめするのはSkyWayというサービスです。このサービスを利用することでNAT越えなどの仕組みを自分で実装せずにすみます。日本語ドキュメントが整備されており、サービス自体も無料で試すことができます。</p><ul><li><a href="https://webrtc.ecl.ntt.com/" target="_blank">SkyWay</a></li></ul><p>SkyWayを利用するにあたっては、次のスライドが参考になります。</p><ul><li><a href="https://www.slideshare.net/iwashi86/skyway-how-to-use-skyway-webrtc" target="_blank">SkyWayを使いこなすために - How to use SkyWay (WebRTC)</a></li></ul><p>余談ですが、WebRTCのライブラリであるPeerJSはメンテされてないので使わない方がよいです。</p><ul><li><a href="https://medium.com/@Tukimikage/peerjs%E3%82%92%E4%BB%8A%E5%BE%8C%E3%82%82%E4%BD%BF%E3%81%84%E7%B6%9A%E3%81%91%E3%82%8B%E3%81%AE%E3%81%AF%E5%8D%B1%E9%99%BA-8c3cf68d56a0" target="_blank">PeerJSを今後も使い続けるのは危険</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ビデオチャットを最短で作りたいと考えている人への備忘録です。次の手順に沿って開発すると4時間程度でビデオチャットを開発できます。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#1-webrtcの概要を把握する&quot;&gt;WebRTCの概要を把握する&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a 
      
    
    </summary>
    
    
    
      <category term="開発" scheme="https://48n.jp/tags/%E9%96%8B%E7%99%BA/"/>
    
  </entry>
  
  <entry>
    <title>デュアルスイーパーカスタムのフジツボスポーツクラブの立ち回り（ガチエリア編）</title>
    <link href="https://48n.jp/blog/2018/07/10/how-to-winning-method-dual-sweeper-custome-in-the-fujitsubo/"/>
    <id>https://48n.jp/blog/2018/07/10/how-to-winning-method-dual-sweeper-custome-in-the-fujitsubo/</id>
    <published>2018-07-10T00:39:55.000Z</published>
    <updated>2018-07-10T00:39:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>スプラトゥーン2のデュアルスイーパーカスタムのフジツボスポーツクラブの立ち回り（ガチエリア編）を解説します。</p><p>フジツボスポーツクラブはデュアルスイーパーのような射程の長い武器は戦いづらいステージです。というのも、高低差が多く平らなスペースが少ないからです。塗り状況が悪い中で無理して中央のエリアに出て行ってもすぐに倒されてしまいます。</p><h2 id="デュアルスイーパーカスタムのフジツボスポーツクラブの立ち回り（ガチエリア編）"><a href="#デュアルスイーパーカスタムのフジツボスポーツクラブの立ち回り（ガチエリア編）" class="headerlink" title="デュアルスイーパーカスタムのフジツボスポーツクラブの立ち回り（ガチエリア編）"></a>デュアルスイーパーカスタムのフジツボスポーツクラブの立ち回り（ガチエリア編）</h2><p>デュアルスイーパーの強ポジは自陣左側のスポンジです。スポンジを膨らませて、そこから中央高台にスプラッシュボムを投げます。このスプラッシュボムがかなり効果的です。というのも、エリアのルール上、中央高台には多くのイカが集まるので、スプラッシュボムが当たりやすいのです。また、自陣左側に敵が侵入してくることは少ないのでデスを抑えることができます。</p><p>数的優位がとれるまではスポンジの上からスプラッシュボムを投げる。数的優位が取れたら、中央に出て行ってエリアを押さえる。この動きができれば勝てます。</p><h2 id="オススメのギア"><a href="#オススメのギア" class="headerlink" title="オススメのギア"></a>オススメのギア</h2><p>オススメのギアはサブ性能アップとサブインク効率アップです。サブ性能アップをつけると、スプラッシュボムの飛距離が伸びるため、より遠くの敵までボムが届くようになります。また、サブインク効率アップでより多くのボムを投げることができます。</p><p>空いたスペースには、インク回復アップとスペシャル増加量アップを積んでいます。これは、スプラッシュボムを投げる回数を増やすためとスペシャルのアメフラシの回数をあげるためです。アメフラシは相手の前線を強制的に下げさせることができるため、エリアの打開時にうってつけのスペシャルです。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;スプラトゥーン2のデュアルスイーパーカスタムのフジツボスポーツクラブの立ち回り（ガチエリア編）を解説します。&lt;/p&gt;
&lt;p&gt;フジツボスポーツクラブはデュアルスイーパーのような射程の長い武器は戦いづらいステージです。というのも、高低差が多く平らなスペースが少ないからです。塗り
      
    
    </summary>
    
    
    
      <category term="スプラトゥーン2" scheme="https://48n.jp/tags/%E3%82%B9%E3%83%97%E3%83%A9%E3%83%88%E3%82%A5%E3%83%BC%E3%83%B32/"/>
    
  </entry>
  
  <entry>
    <title>1つのMTGが午前中をダメにする</title>
    <link href="https://48n.jp/blog/2018/07/05/why-the-morning-is-wasted-on-one-meeting/"/>
    <id>https://48n.jp/blog/2018/07/05/why-the-morning-is-wasted-on-one-meeting/</id>
    <published>2018-07-05T07:34:33.000Z</published>
    <updated>2018-07-05T07:34:33.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>基本的に、予定があることがわかっている時は、何も仕事を終わらせられません。時計を見て｢1時間後に会議があるから、この大事な仕事はまだやらないほうがいいな｣と思ったり、1時間を20分くらいに感じるせいか、一番小さな仕事ですら無意識のうちに先延ばしにします。</p></blockquote><p><a href="https://www.lifehacker.jp/2018/07/overscheduling-your-days-can-wreck-your-productivity.html" target="_blank">生産的な1日は｢予定を入れすぎない｣ことからはじまる</a></p><p>30分後にMTGが予定されているだけで次の仕事をやる気がしなくなります。中途半端にやるくらいなら、MTGが終わってからやろうと思うからです。そして、MTGが終わると何だか疲れてしまい、少し休憩してからやろうと思います。さて、休憩もしたので仕事に取り掛かったのもつかの間、昼休みになります。このような感じで午前中に1つMTGが入っただけで、ほとんど生産的なことができずに午前中が終わってしまいます。たった30分のMTGが午前中をダメにしてしまいます。</p><p>このMTGのように、それ自身は些細な時間でも与える影響は大きいものです。その影響についても考える必要があります。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;基本的に、予定があることがわかっている時は、何も仕事を終わらせられません。時計を見て｢1時間後に会議があるから、この大事な仕事はまだやらないほうがいいな｣と思ったり、1時間を20分くらいに感じるせいか、一番小さな仕事ですら無意識のうちに先延ばしにし
      
    
    </summary>
    
    
    
      <category term="コラム" scheme="https://48n.jp/tags/%E3%82%B3%E3%83%A9%E3%83%A0/"/>
    
  </entry>
  
  <entry>
    <title>SetterとBuilderの使いわけ</title>
    <link href="https://48n.jp/blog/2018/06/29/use-of-setter-or-builder/"/>
    <id>https://48n.jp/blog/2018/06/29/use-of-setter-or-builder/</id>
    <published>2018-06-29T08:39:49.000Z</published>
    <updated>2018-06-29T08:39:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>先日、「SetterとBuilderはどのように使いわければいいのか？」という質問を受けました。なかなかよい質問ですね。Builderを使うとクラスのインスタンスを柔軟に作ることができます。Builderを使ったサンプルコードです。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">User user = User.builder()</span><br><span class="line">        .lastName(<span class="string">"山田"</span>)</span><br><span class="line">        .firstName(<span class="string">"太郎"</span>)</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure><p>Builderを実装したUserクラスのサンプルコードです。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String firstName;</span><br><span class="line"></span><br><span class="line">    User(String lastName, String firstName) &#123;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">        <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserBuilder <span class="title">builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserBuilder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBuilder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String lastName;</span><br><span class="line">        <span class="keyword">private</span> String firstName;</span><br><span class="line"></span><br><span class="line">        UserBuilder() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> UserBuilder <span class="title">lastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> UserBuilder <span class="title">firstName</span><span class="params">(String firstName)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> User <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> User(lastName, firstName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Setterを使うと次のようになります(実装は省略)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setLastName(<span class="string">"山田"</span>);</span><br><span class="line">user.setFirstName(<span class="string">"太郎"</span>);</span><br></pre></td></tr></table></figure><p>Setterの問題点として、インスタンスの状態を変更してしまうことがあります。イミュータブルな実装にする場合、原則としてコンストラクタで値は設定するべきでSetterで変更するべきではありません。</p><p>では、Setterではなくコンストラクタで設定するようにしましょう。引数が少ないうちは問題がないのですが、次の例のように引数の数が増えてしまうとコードが煩雑になってしまいます。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 姓、名、年齢、血液型、国が引数のコンストラクタの例</span></span><br><span class="line"><span class="comment">// 年齢と血液型は不明だが、nullを指定する必要がある</span></span><br><span class="line">User user = <span class="keyword">new</span> User(<span class="string">"山田"</span>, <span class="string">"太郎"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="string">"日本"</span>);</span><br></pre></td></tr></table></figure><p>そこで、Builderを使うメリットが出てきます。Builderを使えば柔軟にパラメーターの設定が行えるようになります。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">User user = User.builder()</span><br><span class="line">        .lastName(<span class="string">"山田"</span>)</span><br><span class="line">        .firstName(<span class="string">"太郎"</span>)</span><br><span class="line">        .country(<span class="string">"日本"</span>)</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure><p>SetterもBuilderもやりたいことはオブジェクトにパラメーターをセットすることです。Setterを使うとオブジェクトの状態を変更してしまうことになります。イミュータブルな実装かつ柔軟にパラメーターを設定したい場合はBuilderを使いましょう。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先日、「SetterとBuilderはどのように使いわければいいのか？」という質問を受けました。なかなかよい質問ですね。Builderを使うとクラスのインスタンスを柔軟に作ることができます。Builderを使ったサンプルコードです。&lt;/p&gt;
&lt;figure class=&quot;h
      
    
    </summary>
    
    
    
      <category term="Java" scheme="https://48n.jp/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>そろそろlombokから卒業しようと考えています</title>
    <link href="https://48n.jp/blog/2018/06/29/graduate-from-lombok/"/>
    <id>https://48n.jp/blog/2018/06/29/graduate-from-lombok/</id>
    <published>2018-06-29T06:26:49.000Z</published>
    <updated>2018-06-29T06:26:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>便利な<a href="https://projectlombok.org/" target="_blank">lombok</a>ですが、そろそろオワコンな感じがしています。理由はJavaのアップデートに追従することが困難になってきているからです。詳しくは<a href="https://qiita.com/tmurakam99/items/b5ffe7f18bc06577f619" target="_blank">Lombok の Java9以降対応</a>の記事に書いてあります。実際、Java9対応も遅かったですね。lombokを使い続けると、Javaのアップデートに追従していけなくなる未来が想像できます。</p><p>Spring Bootも2系からはlombokは使っていませんね。</p><p>lombokは便利ですが、別に無くてもなんとかなるライブラリなので、あえてこれから使う選択をする必要はないと思います。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;便利な&lt;a href=&quot;https://projectlombok.org/&quot; target=&quot;_blank&quot;&gt;lombok&lt;/a&gt;ですが、そろそろオワコンな感じがしています。理由はJavaのアップデートに追従することが困難になってきているからです。詳しくは&lt;a href=
      
    
    </summary>
    
    
    
      <category term="Java" scheme="https://48n.jp/tags/Java/"/>
    
  </entry>
  
</feed>
